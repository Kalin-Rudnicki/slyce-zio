// !!! DO NOT MODIFY !!!
// File was automatically generated by slyce

package slyce.test.json

// format: off

object JsonParser extends _root_.slyce.parse.Parser {
  
  override type NTRoot = _root_.slyce.test.json.JsonParser.NonTerminal.Json
  
  // =====| Terminals |=====
  
  sealed abstract class Terminal(final val tokName: _root_.scala.Predef.String) extends _root_.slyce.core.Token
  object Terminal {
    final case class char(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.test.json.JsonParser.Terminal("char")
                                                                                                    with _root_.slyce.test.json.JsonParser.NonTerminal.StrElem.Lift
    final case class double(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.test.json.JsonParser.Terminal("double")
    final case class escChar(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.test.json.JsonParser.Terminal("escChar")
                                                                                                       with _root_.slyce.test.json.JsonParser.NonTerminal.StrElem.Lift
    final case class int(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.test.json.JsonParser.Terminal("int")
    
    final case class `\"`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.test.json.JsonParser.Terminal(""""\""""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `,`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.test.json.JsonParser.Terminal("""","""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `:`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.test.json.JsonParser.Terminal("""":"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `[`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.test.json.JsonParser.Terminal(""""["""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `]`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.test.json.JsonParser.Terminal(""""]"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `false`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.test.json.JsonParser.Terminal(""""false"""")
                                                                     with _root_.slyce.core.Token.Const
                                                                     with _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean.Lift
    final case class `null`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.test.json.JsonParser.Terminal(""""null"""")
                                                                    with _root_.slyce.core.Token.Const
    final case class `true`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.test.json.JsonParser.Terminal(""""true"""")
                                                                    with _root_.slyce.core.Token.Const
                                                                    with _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean.Lift
    final case class `{`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.test.json.JsonParser.Terminal(""""{"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `}`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.test.json.JsonParser.Terminal(""""}"""")
                                                                 with _root_.slyce.core.Token.Const
    
    val __findRawTerminal: _root_.slyce.core.Span.Highlight => PartialFunction[_root_.scala.Predef.String, _root_.slyce.test.json.JsonParser.Terminal] =
      span => {
        case "\"" => Terminal.`\"`(span)
        case "," => Terminal.`,`(span)
        case ":" => Terminal.`:`(span)
        case "[" => Terminal.`[`(span)
        case "]" => Terminal.`]`(span)
        case "false" => Terminal.`false`(span)
        case "null" => Terminal.`null`(span)
        case "true" => Terminal.`true`(span)
        case "{" => Terminal.`{`(span)
        case "}" => Terminal.`}`(span)
      }
  }
  
  // =====| Non-Terminals |=====
  
  sealed abstract class NonTerminal(final val ntName: _root_.scala.Predef.String) extends _root_.slyce.core.NonTerminal
  object NonTerminal {
    
    sealed abstract class AnonList0 extends _root_.slyce.test.json.JsonParser.NonTerminal("AnonList0") {
      
      final def toList: _root_.scala.List[_root_.slyce.test.json.JsonParser.NonTerminal.AnonList0.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0, stack: _root_.scala.List[_root_.slyce.test.json.JsonParser.NonTerminal.AnonList0.Lift]): _root_.scala.List[_root_.slyce.test.json.JsonParser.NonTerminal.AnonList0.Lift] =
          queue match {
            case _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._1(lift, next) => loop(next, lift :: stack)
            case _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._2 => stack.reverse
          }
        
        loop(this, Nil)
      }
      
    }
    object AnonList0 {
      
      type Lift = _root_.slyce.test.json.JsonParser.NonTerminal.StrElem
      
      final case class _1(
        _1: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem,
        _2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0
      
      case object _2 extends _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0
      
    }
    
    final case class AnonList1Head(
      _1: _root_.slyce.test.json.JsonParser.NonTerminal.Json,
      _2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail,
    ) extends _root_.slyce.test.json.JsonParser.NonTerminal("AnonList1Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail, stack: _root_.scala.List[_root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head.Lift]): _root_.scala.List[_root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head.Lift] =
          queue match {
            case _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._1(_, lift, next) => loop(next, lift :: stack)
            case _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList1Head {
      
      type Lift = _root_.slyce.test.json.JsonParser.NonTerminal.Json
      
    }
    
    sealed abstract class AnonList1Tail extends _root_.slyce.test.json.JsonParser.NonTerminal("AnonList1Tail")
    object AnonList1Tail {
      
      final case class _1(
        _1: _root_.slyce.test.json.JsonParser.Terminal.`,`,
        _2: _root_.slyce.test.json.JsonParser.NonTerminal.Json,
        _3: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail
      
      case object _2 extends _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail
      
    }
    
    final case class AnonList2Head(
      _1: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair,
      _2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail,
    ) extends _root_.slyce.test.json.JsonParser.NonTerminal("AnonList2Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail, stack: _root_.scala.List[_root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head.Lift]): _root_.scala.List[_root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head.Lift] =
          queue match {
            case _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._1(_, lift, next) => loop(next, lift :: stack)
            case _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList2Head {
      
      type Lift = _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair
      
    }
    
    sealed abstract class AnonList2Tail extends _root_.slyce.test.json.JsonParser.NonTerminal("AnonList2Tail")
    object AnonList2Tail {
      
      final case class _1(
        _1: _root_.slyce.test.json.JsonParser.Terminal.`,`,
        _2: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair,
        _3: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail
      
      case object _2 extends _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail
      
    }
    
    sealed abstract class Json extends _root_.slyce.test.json.JsonParser.NonTerminal("Json") {
      
      final def lift: _root_.slyce.test.json.JsonParser.NonTerminal.Json.Lift =
        this match {
          case _root_.slyce.test.json.JsonParser.NonTerminal.Json._1(lift) => lift
          case _root_.slyce.test.json.JsonParser.NonTerminal.Json._2(lift) => lift
          case _root_.slyce.test.json.JsonParser.NonTerminal.Json._3(lift) => lift
          case _root_.slyce.test.json.JsonParser.NonTerminal.Json._4(lift) => lift
          case _root_.slyce.test.json.JsonParser.NonTerminal.Json._5(lift) => lift
          case _root_.slyce.test.json.JsonParser.NonTerminal.Json._6(lift) => lift
          case _root_.slyce.test.json.JsonParser.NonTerminal.Json._7(lift) => lift
        }
      
    }
    object Json {
      
      sealed trait Lift
      
      final case class _1(
        _1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.Json
      
      final case class _2(
        _1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.Json
      
      final case class _3(
        _1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.Json
      
      final case class _4(
        _1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.Json
      
      final case class _5(
        _1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.Json
      
      final case class _6(
        _1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.Json
      
      final case class _7(
        _1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.Json
      
    }
    
    sealed abstract class JsonArray extends _root_.slyce.test.json.JsonParser.NonTerminal("JsonArray")
                                    with _root_.slyce.test.json.JsonParser.NonTerminal.Json.Lift
    object JsonArray {
      
      final case class _1(
        _1: _root_.slyce.test.json.JsonParser.Terminal.`[`,
        _2: _root_.slyce.test.json.JsonParser.Terminal.`]`,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray
        with _root_.slyce.test.json.JsonParser.NonTerminal.Json.Lift
      
      final case class _2(
        _1: _root_.slyce.test.json.JsonParser.Terminal.`[`,
        _2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head,
        _3: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`,
        _4: _root_.slyce.test.json.JsonParser.Terminal.`]`,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray
        with _root_.slyce.test.json.JsonParser.NonTerminal.Json.Lift
      
    }
    
    sealed abstract class JsonBoolean extends _root_.slyce.test.json.JsonParser.NonTerminal("JsonBoolean")
                                      with _root_.slyce.test.json.JsonParser.NonTerminal.Json.Lift {
      
      final def lift: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean.Lift =
        this match {
          case _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean._1(lift) => lift
          case _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean._2(lift) => lift
        }
      
    }
    object JsonBoolean {
      
      sealed trait Lift extends _root_.slyce.core.Token
      
      final case class _1(
        _1: _root_.slyce.test.json.JsonParser.Terminal.`true`,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean
        with _root_.slyce.test.json.JsonParser.NonTerminal.Json.Lift
      
      final case class _2(
        _1: _root_.slyce.test.json.JsonParser.Terminal.`false`,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean
        with _root_.slyce.test.json.JsonParser.NonTerminal.Json.Lift
      
    }
    
    final case class JsonDouble(
      _1: _root_.slyce.test.json.JsonParser.Terminal.double,
    ) extends _root_.slyce.test.json.JsonParser.NonTerminal("JsonDouble")
      with _root_.slyce.test.json.JsonParser.NonTerminal.Json.Lift
    
    final case class JsonInt(
      _1: _root_.slyce.test.json.JsonParser.Terminal.int,
    ) extends _root_.slyce.test.json.JsonParser.NonTerminal("JsonInt")
      with _root_.slyce.test.json.JsonParser.NonTerminal.Json.Lift
    
    final case class JsonNull(
      _1: _root_.slyce.test.json.JsonParser.Terminal.`null`,
    ) extends _root_.slyce.test.json.JsonParser.NonTerminal("JsonNull")
      with _root_.slyce.test.json.JsonParser.NonTerminal.Json.Lift {
      
      final def lift: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull.Lift = this._1
      
    }
    object JsonNull {
      
      type Lift = _root_.slyce.test.json.JsonParser.Terminal.`null`
      
    }
    
    sealed abstract class JsonObject extends _root_.slyce.test.json.JsonParser.NonTerminal("JsonObject")
                                     with _root_.slyce.test.json.JsonParser.NonTerminal.Json.Lift
    object JsonObject {
      
      final case class _1(
        _1: _root_.slyce.test.json.JsonParser.Terminal.`{`,
        _2: _root_.slyce.test.json.JsonParser.Terminal.`}`,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject
        with _root_.slyce.test.json.JsonParser.NonTerminal.Json.Lift
      
      final case class _2(
        _1: _root_.slyce.test.json.JsonParser.Terminal.`{`,
        _2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head,
        _3: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`,
        _4: _root_.slyce.test.json.JsonParser.Terminal.`}`,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject
        with _root_.slyce.test.json.JsonParser.NonTerminal.Json.Lift
      
    }
    
    final case class JsonString(
      _1: _root_.slyce.test.json.JsonParser.Terminal.`\"`,
      _2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0,
      _3: _root_.slyce.test.json.JsonParser.Terminal.`\"`,
    ) extends _root_.slyce.test.json.JsonParser.NonTerminal("JsonString")
      with _root_.slyce.test.json.JsonParser.NonTerminal.Json.Lift
    
    final case class KeyPair(
      _1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString,
      _2: _root_.slyce.test.json.JsonParser.Terminal.`:`,
      _3: _root_.slyce.test.json.JsonParser.NonTerminal.Json,
    ) extends _root_.slyce.test.json.JsonParser.NonTerminal("KeyPair")
    
    sealed abstract class StrElem extends _root_.slyce.test.json.JsonParser.NonTerminal("StrElem") {
      
      final def lift: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem.Lift =
        this match {
          case _root_.slyce.test.json.JsonParser.NonTerminal.StrElem._1(lift) => lift
          case _root_.slyce.test.json.JsonParser.NonTerminal.StrElem._2(lift) => lift
        }
      
    }
    object StrElem {
      
      sealed trait Lift extends _root_.slyce.core.Token
      
      final case class _1(
        _1: _root_.slyce.test.json.JsonParser.Terminal.char,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.StrElem
      
      final case class _2(
        _1: _root_.slyce.test.json.JsonParser.Terminal.escChar,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.StrElem
      
    }
    
    sealed abstract class `Optional_,` extends _root_.slyce.test.json.JsonParser.NonTerminal("`Optional_,`") {
      
      final def toOption: _root_.scala.Option[_root_.slyce.test.json.JsonParser.Terminal.`,`] =
        this match {
          case _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._1(lift) => _root_.scala.Some(lift)
          case _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2 => _root_.scala.None
        }
      
    }
    object `Optional_,` {
      
      final case class _1(
        _1: _root_.slyce.test.json.JsonParser.Terminal.`,`,
      ) extends _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`
      
      case object _2 extends _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`
      
    }
    
  }
  
  // =====| Lexer |=====
  
  private lazy val lexerState0: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.test.json.JsonParser.Terminal](
      id = 0,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState16), // '\t'
        10 -> _root_.scala.Some(lexerState16), // '\n'
        32 -> _root_.scala.Some(lexerState16), // ' '
        34 -> _root_.scala.Some(lexerState1), // '\"'
        44 -> _root_.scala.Some(lexerState17), // ','
        45 -> _root_.scala.Some(lexerState5), // '-'
        47 -> _root_.scala.Some(lexerState18), // '/'
        48 -> _root_.scala.Some(lexerState4), // '0'
        49 -> _root_.scala.Some(lexerState4), // '1'
        50 -> _root_.scala.Some(lexerState4), // '2'
        51 -> _root_.scala.Some(lexerState4), // '3'
        52 -> _root_.scala.Some(lexerState4), // '4'
        53 -> _root_.scala.Some(lexerState4), // '5'
        54 -> _root_.scala.Some(lexerState4), // '6'
        55 -> _root_.scala.Some(lexerState4), // '7'
        56 -> _root_.scala.Some(lexerState4), // '8'
        57 -> _root_.scala.Some(lexerState4), // '9'
        58 -> _root_.scala.Some(lexerState17), // ':'
        91 -> _root_.scala.Some(lexerState17), // '['
        93 -> _root_.scala.Some(lexerState17), // ']'
        102 -> _root_.scala.Some(lexerState22), // 'f'
        110 -> _root_.scala.Some(lexerState19), // 'n'
        116 -> _root_.scala.Some(lexerState13), // 't'
        123 -> _root_.scala.Some(lexerState17), // '{'
        125 -> _root_.scala.Some(lexerState17), // '}'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState1: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal](
      id = 1,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.test.json.JsonParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState8)),
        ),
      ),
    )
  
  private lazy val lexerState2: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal](
      id = 2,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.test.json.JsonParser.Terminal.escChar(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState3: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal](
      id = 3,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.test.json.JsonParser.Terminal.char(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState4: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 4,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.test.json.JsonParser.Terminal.int(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState4) // '0' - '9'
      case 46 => _root_.scala.Some(lexerState6) // '.'
    }
  
  private lazy val lexerState5: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 5,
      yields = None,
    ) {
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState4) // '0' - '9'
    }
  
  private lazy val lexerState6: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 6,
      yields = None,
    ) {
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState20) // '0' - '9'
    }
  
  private lazy val lexerState7: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal](
      id = 7,
      on = _ => _root_.scala.Some(lexerState2),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.test.json.JsonParser.Terminal.char(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState8: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 8,
      yields = None,
    ) {
      case 92 => _root_.scala.Some(lexerState7) // '\\'
      case 34 => _root_.scala.Some(lexerState15) // '\"'
      case _ => _root_.scala.Some(lexerState3)
    }
  
  private lazy val lexerState9: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 9,
      yields = None,
    ) {
      case 117 => _root_.scala.Some(lexerState23) // 'u'
    }
  
  private lazy val lexerState10: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal](
      id = 10,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState11: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 11,
      yields = None,
    ) {
      case 108 => _root_.scala.Some(lexerState24) // 'l'
    }
  
  private lazy val lexerState12: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 12,
      yields = None,
    ) {
      case 108 => _root_.scala.Some(lexerState14) // 'l'
    }
  
  private lazy val lexerState13: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 13,
      yields = None,
    ) {
      case 114 => _root_.scala.Some(lexerState9) // 'r'
    }
  
  private lazy val lexerState14: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 14,
      yields = None,
    ) {
      case 108 => _root_.scala.Some(lexerState21) // 'l'
    }
  
  private lazy val lexerState15: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal](
      id = 15,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.test.json.JsonParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState16: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal](
      id = 16,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState17: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal](
      id = 17,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.test.json.JsonParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState18: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 18,
      yields = None,
    ) {
      case 47 => _root_.scala.Some(lexerState25) // '/'
    }
  
  private lazy val lexerState19: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 19,
      yields = None,
    ) {
      case 117 => _root_.scala.Some(lexerState12) // 'u'
    }
  
  private lazy val lexerState20: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 20,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.test.json.JsonParser.Terminal.double(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState20) // '0' - '9'
    }
  
  private lazy val lexerState21: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal](
      id = 21,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.test.json.JsonParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState22: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 22,
      yields = None,
    ) {
      case 97 => _root_.scala.Some(lexerState11) // 'a'
    }
  
  private lazy val lexerState23: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 23,
      yields = None,
    ) {
      case 101 => _root_.scala.Some(lexerState21) // 'e'
    }
  
  private lazy val lexerState24: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 24,
      yields = None,
    ) {
      case 115 => _root_.scala.Some(lexerState23) // 's'
    }
  
  private lazy val lexerState25: _root_.slyce.parse.Lexer.State[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.test.json.JsonParser.Terminal](
      id = 25,
      yields = None,
    ) {
      case 10 => _root_.scala.Some(lexerState10) // '\n'
      case _ => _root_.scala.Some(lexerState25)
    }
  
  override val lexer: _root_.slyce.parse.Lexer[_root_.slyce.test.json.JsonParser.Terminal] =
    _root_.slyce.parse.Lexer[_root_.slyce.test.json.JsonParser.Terminal](lexerState0)
  
  // =====| Grammar |=====
  
  lazy val grammarState0: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 0,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState59)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState16)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState118)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState135)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState72)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState56)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState27)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState58)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState54
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull => grammarState91
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject => grammarState61
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt => grammarState127
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean => grammarState67
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble => grammarState64
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.Json => grammarState143
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray => grammarState92
      },
    )
  
  lazy val grammarState1: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 1,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.test.json.JsonParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState2: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 2,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.double), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.double), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState3: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 3,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState149)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState17)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState101)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState145)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState82)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState85)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState2)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState120)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState19
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull => grammarState9
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject => grammarState132
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt => grammarState133
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean => grammarState10
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble => grammarState36
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.Json => grammarState43
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray => grammarState123
      },
    )
  
  lazy val grammarState4: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 4,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState73)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState147)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head => grammarState21
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair => grammarState28
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState81
      },
    )
  
  lazy val grammarState5: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 5,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState114)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0 => grammarState14
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem => grammarState55
      },
    )
  
  lazy val grammarState6: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 6,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState32)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState7: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 7,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState8: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 8,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState75)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState60)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState31)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState98)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState20)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState129)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState112)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState41)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState39)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState46
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull => grammarState110
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject => grammarState100
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head => grammarState146
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt => grammarState121
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean => grammarState52
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble => grammarState137
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.Json => grammarState115
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray => grammarState57
      },
    )
  
  lazy val grammarState9: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 9,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._1(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState10: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 10,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._2(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState11: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 11,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.Json), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head(_1, _2), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.Json), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState12: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 12,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.test.json.JsonParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.test.json.JsonParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState13: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 13,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState73)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair => grammarState77
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState94
      },
    )
  
  lazy val grammarState14: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 14,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState105)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState15: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 15,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState75)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState60)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState31)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState29)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState144)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState129)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState119)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState41)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState70)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState46
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull => grammarState110
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject => grammarState100
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head => grammarState99
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt => grammarState121
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean => grammarState52
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble => grammarState137
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.Json => grammarState34
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray => grammarState57
      },
    )
  
  lazy val grammarState16: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 16,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`false`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState17: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 17,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`false`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean._2(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`false`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState18: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 18,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.test.json.JsonParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonString(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.test.json.JsonParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonString(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState19: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 19,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._3(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState20: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 20,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState75)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState60)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState31)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState98)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState20)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState129)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState112)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState41)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState39)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState46
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull => grammarState110
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject => grammarState100
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head => grammarState42
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt => grammarState121
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean => grammarState52
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble => grammarState137
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.Json => grammarState115
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray => grammarState57
      },
    )
  
  lazy val grammarState21: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 21,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState7)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,` => grammarState104
      },
    )
  
  lazy val grammarState22: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 22,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState45)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState23: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 23,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.test.json.JsonParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.test.json.JsonParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState24: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 24,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState45)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState25: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 25,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState41)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState75)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState60)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState31)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState98)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState20)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState129)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState112)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState46
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull => grammarState110
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject => grammarState100
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt => grammarState121
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean => grammarState52
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble => grammarState137
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.Json => grammarState128
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray => grammarState57
      },
    )
  
  lazy val grammarState26: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 26,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState7)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,` => grammarState109
      },
    )
  
  lazy val grammarState27: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 27,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.double), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState28: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 28,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState66)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail => grammarState140
      },
    )
  
  lazy val grammarState29: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 29,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState114)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0 => grammarState134
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem => grammarState55
      },
    )
  
  lazy val grammarState30: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 30,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState49)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState31: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 31,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.int), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.int), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState32: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 32,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.test.json.JsonParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.test.json.JsonParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState33: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 33,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.test.json.JsonParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState34: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 34,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail => grammarState11
      },
    )
  
  lazy val grammarState35: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 35,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState74)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState36: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 36,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._5(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._5(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState37: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 37,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.StrElem._2(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.StrElem._2(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.StrElem._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState38: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 38,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState63)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail => grammarState140
      },
    )
  
  lazy val grammarState39: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 39,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.test.json.JsonParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.test.json.JsonParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState40: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 40,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState114)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0 => grammarState48
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem => grammarState40
      },
    )
  
  lazy val grammarState41: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 41,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`null`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`null`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState42: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 42,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,` => grammarState50
      },
    )
  
  lazy val grammarState43: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 43,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.Json), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.test.json.JsonParser.Terminal.`:`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.Json), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.test.json.JsonParser.Terminal.`:`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState44: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 44,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState41)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState75)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState60)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState31)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState5)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState8)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState129)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState108)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState46
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull => grammarState110
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject => grammarState100
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt => grammarState121
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean => grammarState52
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble => grammarState137
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.Json => grammarState88
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray => grammarState57
      },
    )
  
  lazy val grammarState45: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 45,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.test.json.JsonParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.test.json.JsonParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState46: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 46,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._3(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState47: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 47,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState114)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0 => grammarState48
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem => grammarState47
      },
    )
  
  lazy val grammarState48: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 48,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState49: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 49,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.test.json.JsonParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState50: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 50,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState32)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState51: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 51,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState45)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState52: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 52,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._2(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState53: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 53,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState63)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail => grammarState130
      },
    )
  
  lazy val grammarState54: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 54,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState55: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 55,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState114)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0 => grammarState48
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem => grammarState55
      },
    )
  
  lazy val grammarState56: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 56,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState75)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState60)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState31)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState5)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState8)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState129)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState108)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState41)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState33)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState46
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull => grammarState110
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject => grammarState100
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head => grammarState65
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt => grammarState121
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean => grammarState52
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble => grammarState137
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.Json => grammarState62
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray => grammarState57
      },
    )
  
  lazy val grammarState57: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 57,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._6(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._6(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState58: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 58,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState73)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState97)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head => grammarState69
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair => grammarState86
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState94
      },
    )
  
  lazy val grammarState59: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 59,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`null`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState60: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 60,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`true`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean._1(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`true`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState61: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 61,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._7(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState62: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 62,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail => grammarState11
      },
    )
  
  lazy val grammarState63: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 63,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState73)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair => grammarState53
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState35
      },
    )
  
  lazy val grammarState64: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 64,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._5(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState65: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 65,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,` => grammarState148
      },
    )
  
  lazy val grammarState66: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 66,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState73)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair => grammarState139
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState81
      },
    )
  
  lazy val grammarState67: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 67,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState68: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 68,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState7)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,` => grammarState96
      },
    )
  
  lazy val grammarState69: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 69,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState7)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,` => grammarState30
      },
    )
  
  lazy val grammarState70: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 70,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.test.json.JsonParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.test.json.JsonParser.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState71: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 71,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState7)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,` => grammarState122
      },
    )
  
  lazy val grammarState72: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 72,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState114)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0 => grammarState89
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem => grammarState47
      },
    )
  
  lazy val grammarState73: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 73,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState114)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0 => grammarState102
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem => grammarState40
      },
    )
  
  lazy val grammarState74: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 74,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState149)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState17)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState101)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState145)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState106)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState142)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState2)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState78)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState19
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull => grammarState9
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject => grammarState132
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt => grammarState133
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean => grammarState10
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble => grammarState36
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.Json => grammarState43
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray => grammarState123
      },
    )
  
  lazy val grammarState75: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 75,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`false`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean._2(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`false`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState76: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 76,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState114)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0 => grammarState48
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem => grammarState76
      },
    )
  
  lazy val grammarState77: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 77,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState13)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail => grammarState130
      },
    )
  
  lazy val grammarState78: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 78,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState73)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState147)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head => grammarState26
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair => grammarState28
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState81
      },
    )
  
  lazy val grammarState79: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 79,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState105)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState80: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 80,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.Json), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.Json), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState81: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 81,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState3)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState82: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 82,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState114)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0 => grammarState126
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem => grammarState76
      },
    )
  
  lazy val grammarState83: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 83,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState136)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail => grammarState80
      },
    )
  
  lazy val grammarState84: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 84,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,` => grammarState22
      },
    )
  
  lazy val grammarState85: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 85,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState75)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState60)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState31)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState29)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState144)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState129)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState119)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState41)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState70)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState46
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull => grammarState110
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject => grammarState100
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head => grammarState113
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt => grammarState121
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean => grammarState52
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble => grammarState137
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.Json => grammarState34
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray => grammarState57
      },
    )
  
  lazy val grammarState86: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 86,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState13)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail => grammarState140
      },
    )
  
  lazy val grammarState87: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 87,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState117)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState88: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 88,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState44)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail => grammarState80
      },
    )
  
  lazy val grammarState89: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 89,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState124)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState90: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 90,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,` => grammarState6
      },
    )
  
  lazy val grammarState91: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 91,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState92: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 92,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._6(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState93: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 93,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState7)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,` => grammarState125
      },
    )
  
  lazy val grammarState94: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 94,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState95)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState95: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 95,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState149)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState17)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState101)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState145)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState116)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState15)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState2)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState4)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState19
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull => grammarState9
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject => grammarState132
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt => grammarState133
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean => grammarState10
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble => grammarState36
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.Json => grammarState43
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray => grammarState123
      },
    )
  
  lazy val grammarState96: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 96,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState23)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState97: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 97,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.test.json.JsonParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState98: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 98,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState114)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0 => grammarState79
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem => grammarState55
      },
    )
  
  lazy val grammarState99: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 99,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,` => grammarState24
      },
    )
  
  lazy val grammarState100: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 100,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._7(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._7(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState101: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 101,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`true`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean._1(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`true`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState102: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 102,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState103)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState103: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 103,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.test.json.JsonParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonString(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState104: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 104,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState117)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState105: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 105,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.test.json.JsonParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonString(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.test.json.JsonParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonString(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState106: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 106,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState114)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0 => grammarState111
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem => grammarState76
      },
    )
  
  lazy val grammarState107: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 107,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState18)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState108: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 108,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState73)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState12)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head => grammarState71
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair => grammarState38
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState35
      },
    )
  
  lazy val grammarState109: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 109,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState117)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState110: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 110,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._1(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState111: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 111,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState18)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState112: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 112,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState73)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState12)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head => grammarState68
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair => grammarState38
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState35
      },
    )
  
  lazy val grammarState113: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 113,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,` => grammarState51
      },
    )
  
  lazy val grammarState114: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 114,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.StrElem._1(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.StrElem._1(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.StrElem._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState115: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 115,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail => grammarState11
      },
    )
  
  lazy val grammarState116: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 116,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState114)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0 => grammarState107
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.StrElem => grammarState76
      },
    )
  
  lazy val grammarState117: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 117,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.test.json.JsonParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.test.json.JsonParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState118: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 118,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`true`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState119: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 119,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState73)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState12)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head => grammarState93
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair => grammarState38
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState35
      },
    )
  
  lazy val grammarState120: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 120,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState73)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState147)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head => grammarState138
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair => grammarState28
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState81
      },
    )
  
  lazy val grammarState121: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 121,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._4(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState122: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 122,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState23)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState123: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 123,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._6(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._6(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState124: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 124,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.test.json.JsonParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonString(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState125: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 125,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState23)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState126: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 126,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState18)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState127: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 127,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState128: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 128,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState25)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Tail => grammarState80
      },
    )
  
  lazy val grammarState129: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 129,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.double), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.double), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState130: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 130,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState131: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 131,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState32)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState132: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 132,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._7(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._7(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState133: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 133,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._4(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState134: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 134,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState105)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState135: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 135,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.int), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState136: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 136,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState41)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState75)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState60)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState31)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState29)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState144)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState129)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState119)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState46
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull => grammarState110
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject => grammarState100
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt => grammarState121
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean => grammarState52
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble => grammarState137
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.Json => grammarState83
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray => grammarState57
      },
    )
  
  lazy val grammarState137: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 137,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._5(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.Json._5(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState138: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 138,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState7)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,` => grammarState87
      },
    )
  
  lazy val grammarState139: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 139,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: (_: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState66)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail => grammarState130
      },
    )
  
  lazy val grammarState140: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 140,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head(_1, _2), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.test.json.JsonParser.NonTerminal.KeyPair), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.AnonList2Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState141: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 141,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState142: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 142,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState75)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState60)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState31)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState29)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState144)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState129)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState119)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState41)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState70)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState46
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull => grammarState110
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject => grammarState100
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head => grammarState84
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt => grammarState121
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean => grammarState52
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble => grammarState137
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.Json => grammarState34
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray => grammarState57
      },
    )
  
  lazy val grammarState143: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 143,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Accept[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(root: _root_.slyce.test.json.JsonParser.NonTerminal.Json), _) :: _root_.scala.Nil => root
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState144: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 144,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`false`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState75)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`true`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState60)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState31)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState98)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState20)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.double) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState129)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState112)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState41)
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState39)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonString => grammarState46
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull => grammarState110
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject => grammarState100
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.AnonList1Head => grammarState90
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt => grammarState121
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonBoolean => grammarState52
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonDouble => grammarState137
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.Json => grammarState115
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.JsonArray => grammarState57
      },
    )
  
  lazy val grammarState145: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 145,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.int), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.int), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonInt(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState146: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 146,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,`._2, stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.test.json.JsonParser.NonTerminal.`Optional_,` => grammarState131
      },
    )
  
  lazy val grammarState147: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 147,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.test.json.JsonParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.test.json.JsonParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonObject._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState148: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 148,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState1)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState149: _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](
      id = 149,
      onTerm = {
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`null`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull(_1), stack)
          }
        case (tok: _root_.slyce.test.json.JsonParser.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.test.json.JsonParser.Terminal.`null`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.test.json.JsonParser.NonTerminal.JsonNull(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  override val grammar: _root_.slyce.parse.Grammar[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json] =
    _root_.slyce.parse.Grammar[_root_.slyce.test.json.JsonParser.Terminal, _root_.slyce.test.json.JsonParser.NonTerminal, _root_.slyce.test.json.JsonParser.NonTerminal.Json](grammarState0)
  
}

// format: on
