
@start: Lexer

Lexer : "@start:" mode Mode+
      ;

Mode : "@mode:" mode Line+
     ;

Line      : GroupInner ";" (Yield . "," ^Yield)* ToMode
          ;
Yield     : YieldType SubString
          ;
YieldType ^ "@"
          | term
          | Raw
          ;
SubString :
          | "[" int "]"
          | "[" int "," "]"
          | "[" "," int "]" // TODO (KR) : Remove this one?
          | "[" int "," int "]"
          ;
ToMode    :
          | "->" mode
          | ">>" mode
          | "<-"
          ;

Raw  ^ "\"" ^Char+ "\""
     ;
Char ^ chars
     | escChar
     ;

Regex      : Group
           | CharClass
           | Regex Quant
           ;
GroupInner + Sequence . "|" ^Sequence
           ;
Sequence   * Regex
           ;
Group      ^ "(" ^GroupInner ")"
           ;
Quant      : "?"
           | "*"
           | "+"
           | "{" int "}"
           | "{" int "," "}"
           | "{" "," int "}"
           | "{" int "," int "}"
           ;
CharClass  : "[" "^"? CCChars+ "]"
           | char
           | escChar
           | escChars
           ;
CCChars    : CCChar "-" CCChar
           | CCChar
           | escChars
           ;
CCChar     ^ char
           | escChar
           ;
