// !!! DO NOT MODIFY !!!
// File was automatically generated by slyce

package slyce.generate.parsers

// format: off

object Lexer {
  
  // =====| Terminals |=====
  
  sealed abstract class Terminal(final val tokName: _root_.scala.Predef.String) extends _root_.slyce.core.Token
  object Terminal {
    final case class char(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("char")
                                                                                                    with _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar.Lift
    final case class chars(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("chars")
                                                                                                     with _root_.slyce.generate.parsers.Lexer.NonTerminal.Char.Lift
    final case class escChar(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("escChar")
                                                                                                       with _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar.Lift
                                                                                                       with _root_.slyce.generate.parsers.Lexer.NonTerminal.Char.Lift
    final case class escChars(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("escChars")
    final case class int(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("int")
    final case class mode(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("mode")
    final case class term(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("term")
                                                                                                    with _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType.Lift
    
    final case class `\"`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""\""""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `(`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""("""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `)`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("""")"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `*`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""*"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `+`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""+"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `,`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("""","""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `-`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""-"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `->`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""->"""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `;`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("""";"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `<-`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""<-"""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `>>`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("""">>"""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `\\?`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""?"""")
                                                                   with _root_.slyce.core.Token.Const
    final case class `@`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""@"""")
                                                                 with _root_.slyce.core.Token.Const
                                                                 with _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType.Lift
    final case class `@mode:`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""@mode:"""")
                                                                      with _root_.slyce.core.Token.Const
    final case class `@start:`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""@start:"""")
                                                                       with _root_.slyce.core.Token.Const
    final case class `[`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""["""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `]`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""]"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `^`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""^"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `{`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""{"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `|`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""|"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `}`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""}"""")
                                                                 with _root_.slyce.core.Token.Const
    
    val __findRawTerminal: _root_.slyce.core.Span.Highlight => PartialFunction[_root_.scala.Predef.String, _root_.slyce.generate.parsers.Lexer.Terminal] =
      span => {
        case "\"" => Terminal.`\"`(span)
        case "(" => Terminal.`(`(span)
        case ")" => Terminal.`)`(span)
        case "*" => Terminal.`*`(span)
        case "+" => Terminal.`+`(span)
        case "," => Terminal.`,`(span)
        case "-" => Terminal.`-`(span)
        case "->" => Terminal.`->`(span)
        case ";" => Terminal.`;`(span)
        case "<-" => Terminal.`<-`(span)
        case ">>" => Terminal.`>>`(span)
        case "?" => Terminal.`\\?`(span)
        case "@" => Terminal.`@`(span)
        case "@mode:" => Terminal.`@mode:`(span)
        case "@start:" => Terminal.`@start:`(span)
        case "[" => Terminal.`[`(span)
        case "]" => Terminal.`]`(span)
        case "^" => Terminal.`^`(span)
        case "{" => Terminal.`{`(span)
        case "|" => Terminal.`|`(span)
        case "}" => Terminal.`}`(span)
      }
  }
  
  // =====| Non-Terminals |=====
  
  sealed abstract class NonTerminal(final val ntName: _root_.scala.Predef.String) extends _root_.slyce.core.NonTerminal
  object NonTerminal {
    
    final case class AnonList0Head(
      _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList0Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail._1(lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList0Head {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode
      
    }
    
    sealed abstract class AnonList0Tail extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList0Tail")
    object AnonList0Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail
      
    }
    
    final case class AnonList1Head(
      _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList1Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._1(lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList1Head {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.Line
      
    }
    
    sealed abstract class AnonList1Tail extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList1Tail")
    object AnonList1Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail
      
    }
    
    sealed abstract class AnonList2Head extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList2Head") {
      
      final def toList: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_, lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2 => stack.reverse
          }
        
        this match {
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(lift, next) => loop(next, lift :: Nil)
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2 => Nil
        }
      }
      
    }
    object AnonList2Head {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head
      
    }
    
    sealed abstract class AnonList2Tail extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList2Tail")
    object AnonList2Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield,
        _3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail
      
    }
    
    final case class AnonList3Head(
      _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList3Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail._1(lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList3Head {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.Char
      
    }
    
    sealed abstract class AnonList3Tail extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList3Tail")
    object AnonList3Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail
      
    }
    
    final case class AnonList4Head(
      _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList4Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._1(lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList4Head {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars
      
    }
    
    sealed abstract class AnonList4Tail extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList4Tail")
    object AnonList4Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail
      
    }
    
    sealed abstract class CCChar extends _root_.slyce.generate.parsers.Lexer.NonTerminal("CCChar") {
      
      final def lift: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar.Lift =
        this match {
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(lift) => lift
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(lift) => lift
        }
      
    }
    object CCChar {
      
      sealed trait Lift extends _root_.slyce.core.Token
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.char,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar
      
    }
    
    sealed abstract class CCChars extends _root_.slyce.generate.parsers.Lexer.NonTerminal("CCChars")
    object CCChars {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.`-`,
        _3: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars
      
    }
    
    sealed abstract class Char extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Char") {
      
      final def lift: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char.Lift =
        this match {
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._1(lift) => lift
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._2(lift) => lift
        }
      
    }
    object Char {
      
      sealed trait Lift extends _root_.slyce.core.Token
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.chars,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Char
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Char
      
    }
    
    sealed abstract class CharClass extends _root_.slyce.generate.parsers.Lexer.NonTerminal("CharClass")
    object CharClass {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`,
        _3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head,
        _4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.char,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass
      
      final case class _4(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass
      
    }
    
    final case class Group(
      _1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner,
      _3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Group") {
      
      final def lift: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group.Lift = this._2
      
    }
    object Group {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner
      
    }
    
    final case class GroupInner(
      _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("GroupInner") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._1(_, lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object GroupInner {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence
      
    }
    
    sealed abstract class GroupInnerTail extends _root_.slyce.generate.parsers.Lexer.NonTerminal("GroupInnerTail")
    object GroupInnerTail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`|`,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence,
        _3: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail
      
    }
    
    final case class Lexer(
      _1: _root_.slyce.generate.parsers.Lexer.Terminal.`@start:`,
      _2: _root_.slyce.generate.parsers.Lexer.Terminal.mode,
      _3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Lexer")
    
    final case class Line(
      _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner,
      _2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`,
      _3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head,
      _4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Line")
    
    final case class Mode(
      _1: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`,
      _2: _root_.slyce.generate.parsers.Lexer.Terminal.mode,
      _3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Mode")
    
    sealed abstract class Quant extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Quant")
    object Quant {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant
      
      final case class _4(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant
      
      final case class _5(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`,
        _4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant
      
      final case class _6(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant
      
      final case class _7(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`,
        _4: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant
      
    }
    
    final case class Raw(
      _1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head,
      _3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Raw")
      with _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType.Lift {
      
      final def lift: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw.Lift = this._2
      
    }
    object Raw {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head
      
    }
    
    sealed abstract class Regex extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Regex")
    object Regex {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex
      
    }
    
    sealed abstract class Sequence extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Sequence") {
      
      final def toList: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence, stack: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._1(lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2 => stack.reverse
          }
        
        loop(this, Nil)
      }
      
    }
    object Sequence {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence
      
    }
    
    sealed abstract class SubString extends _root_.slyce.generate.parsers.Lexer.NonTerminal("SubString")
    object SubString {
      
      case object _1 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`,
        _4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString
      
      final case class _4(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString
      
      final case class _5(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`,
        _4: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString
      
    }
    
    sealed abstract class ToMode extends _root_.slyce.generate.parsers.Lexer.NonTerminal("ToMode")
    object ToMode {
      
      case object _1 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.mode,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.mode,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode
      
      final case class _4(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode
      
    }
    
    final case class Yield(
      _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Yield")
    
    sealed abstract class YieldType extends _root_.slyce.generate.parsers.Lexer.NonTerminal("YieldType") {
      
      final def lift: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType.Lift =
        this match {
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(lift) => lift
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(lift) => lift
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(lift) => lift
        }
      
    }
    object YieldType {
      
      sealed trait Lift
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.term,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType
      
    }
    
    sealed abstract class `Optional_^` extends _root_.slyce.generate.parsers.Lexer.NonTerminal("`Optional_^`") {
      
      final def toOption: _root_.scala.Option[_root_.slyce.generate.parsers.Lexer.Terminal.`^`] =
        this match {
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._1(lift) => _root_.scala.Some(lift)
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2 => _root_.scala.None
        }
      
    }
    object `Optional_^` {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`^`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`
      
    }
    
  }
  
  // =====| Lexer |=====
  
  private lazy val lexerState0: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 0,
      on = _root_.scala.collection.immutable.Map(
        10 -> _root_.scala.Some(lexerState22), // '\n'
        32 -> _root_.scala.Some(lexerState40), // ' '
        40 -> _root_.scala.Some(lexerState5), // '('
        41 -> _root_.scala.Some(lexerState5), // ')'
        42 -> _root_.scala.Some(lexerState5), // '*'
        43 -> _root_.scala.Some(lexerState5), // '+'
        46 -> _root_.scala.Some(lexerState63), // '.'
        47 -> _root_.scala.Some(lexerState4), // '/'
        59 -> _root_.scala.Some(lexerState30), // ';'
        63 -> _root_.scala.Some(lexerState5), // '?'
        64 -> _root_.scala.Some(lexerState20), // '@'
        91 -> _root_.scala.Some(lexerState43), // '['
        92 -> _root_.scala.Some(lexerState64), // '\\'
        123 -> _root_.scala.Some(lexerState32), // '{'
        124 -> _root_.scala.Some(lexerState5), // '|'
      ),
      elseOn = _root_.scala.Some(lexerState26),
      yields = None,
    )
  
  private lazy val lexerState1: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 1,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (1, 1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.escChars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState2: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 2,
      on = _root_.scala.collection.immutable.Map(
        62 -> _root_.scala.Some(lexerState55), // '>'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState3: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 3,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState4: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 4,
      on = _root_.scala.collection.immutable.Map(
        42 -> _root_.scala.Some(lexerState18), // '*'
        47 -> _root_.scala.Some(lexerState38), // '/'
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.char(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState5: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 5,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState6: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 6,
      on = _root_.scala.collection.immutable.Map(
        42 -> _root_.scala.Some(lexerState29), // '*'
      ),
      elseOn = _root_.scala.Some(lexerState6),
      yields = None,
    )
  
  private lazy val lexerState7: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 7,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState35)),
        ),
      ),
    )
  
  private lazy val lexerState8: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 8,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState9: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 9,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState10: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 10,
      on = _root_.scala.collection.immutable.Map(
        47 -> _root_.scala.Some(lexerState8), // '/'
      ),
      elseOn = _root_.scala.Some(lexerState18),
      yields = None,
    )
  
  private lazy val lexerState11: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 11,
      on = _root_.scala.collection.immutable.Map(
        48 -> _root_.scala.Some(lexerState11), // '0'
        49 -> _root_.scala.Some(lexerState11), // '1'
        50 -> _root_.scala.Some(lexerState11), // '2'
        51 -> _root_.scala.Some(lexerState11), // '3'
        52 -> _root_.scala.Some(lexerState11), // '4'
        53 -> _root_.scala.Some(lexerState11), // '5'
        54 -> _root_.scala.Some(lexerState11), // '6'
        55 -> _root_.scala.Some(lexerState11), // '7'
        56 -> _root_.scala.Some(lexerState11), // '8'
        57 -> _root_.scala.Some(lexerState11), // '9'
        65 -> _root_.scala.Some(lexerState11), // 'A'
        66 -> _root_.scala.Some(lexerState11), // 'B'
        67 -> _root_.scala.Some(lexerState11), // 'C'
        68 -> _root_.scala.Some(lexerState11), // 'D'
        69 -> _root_.scala.Some(lexerState11), // 'E'
        70 -> _root_.scala.Some(lexerState11), // 'F'
        71 -> _root_.scala.Some(lexerState11), // 'G'
        72 -> _root_.scala.Some(lexerState11), // 'H'
        73 -> _root_.scala.Some(lexerState11), // 'I'
        74 -> _root_.scala.Some(lexerState11), // 'J'
        75 -> _root_.scala.Some(lexerState11), // 'K'
        76 -> _root_.scala.Some(lexerState11), // 'L'
        77 -> _root_.scala.Some(lexerState11), // 'M'
        78 -> _root_.scala.Some(lexerState11), // 'N'
        79 -> _root_.scala.Some(lexerState11), // 'O'
        80 -> _root_.scala.Some(lexerState11), // 'P'
        81 -> _root_.scala.Some(lexerState11), // 'Q'
        82 -> _root_.scala.Some(lexerState11), // 'R'
        83 -> _root_.scala.Some(lexerState11), // 'S'
        84 -> _root_.scala.Some(lexerState11), // 'T'
        85 -> _root_.scala.Some(lexerState11), // 'U'
        86 -> _root_.scala.Some(lexerState11), // 'V'
        87 -> _root_.scala.Some(lexerState11), // 'W'
        88 -> _root_.scala.Some(lexerState11), // 'X'
        89 -> _root_.scala.Some(lexerState11), // 'Y'
        90 -> _root_.scala.Some(lexerState11), // 'Z'
        95 -> _root_.scala.Some(lexerState11), // '_'
        97 -> _root_.scala.Some(lexerState11), // 'a'
        98 -> _root_.scala.Some(lexerState11), // 'b'
        99 -> _root_.scala.Some(lexerState11), // 'c'
        100 -> _root_.scala.Some(lexerState11), // 'd'
        101 -> _root_.scala.Some(lexerState11), // 'e'
        102 -> _root_.scala.Some(lexerState11), // 'f'
        103 -> _root_.scala.Some(lexerState11), // 'g'
        104 -> _root_.scala.Some(lexerState11), // 'h'
        105 -> _root_.scala.Some(lexerState11), // 'i'
        106 -> _root_.scala.Some(lexerState11), // 'j'
        107 -> _root_.scala.Some(lexerState11), // 'k'
        108 -> _root_.scala.Some(lexerState11), // 'l'
        109 -> _root_.scala.Some(lexerState11), // 'm'
        110 -> _root_.scala.Some(lexerState11), // 'n'
        111 -> _root_.scala.Some(lexerState11), // 'o'
        112 -> _root_.scala.Some(lexerState11), // 'p'
        113 -> _root_.scala.Some(lexerState11), // 'q'
        114 -> _root_.scala.Some(lexerState11), // 'r'
        115 -> _root_.scala.Some(lexerState11), // 's'
        116 -> _root_.scala.Some(lexerState11), // 't'
        117 -> _root_.scala.Some(lexerState11), // 'u'
        118 -> _root_.scala.Some(lexerState11), // 'v'
        119 -> _root_.scala.Some(lexerState11), // 'w'
        120 -> _root_.scala.Some(lexerState11), // 'x'
        121 -> _root_.scala.Some(lexerState11), // 'y'
        122 -> _root_.scala.Some(lexerState11), // 'z'
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.mode(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState12: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 12,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState12), // '\t'
        32 -> _root_.scala.Some(lexerState12), // ' '
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState13: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 13,
      on = _root_.scala.collection.immutable.Map(
        111 -> _root_.scala.Some(lexerState15), // 'o'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState14: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 14,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState15: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 15,
      on = _root_.scala.collection.immutable.Map(
        100 -> _root_.scala.Some(lexerState34), // 'd'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState16: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 16,
      on = _root_.scala.collection.immutable.Map(
        48 -> _root_.scala.Some(lexerState39), // '0'
        49 -> _root_.scala.Some(lexerState39), // '1'
        50 -> _root_.scala.Some(lexerState39), // '2'
        51 -> _root_.scala.Some(lexerState39), // '3'
        52 -> _root_.scala.Some(lexerState39), // '4'
        53 -> _root_.scala.Some(lexerState39), // '5'
        54 -> _root_.scala.Some(lexerState39), // '6'
        55 -> _root_.scala.Some(lexerState39), // '7'
        56 -> _root_.scala.Some(lexerState39), // '8'
        57 -> _root_.scala.Some(lexerState39), // '9'
        62 -> _root_.scala.Some(lexerState55), // '>'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState17: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 17,
      on = _root_.scala.collection.immutable.Map(
        45 -> _root_.scala.Some(lexerState55), // '-'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState18: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 18,
      on = _root_.scala.collection.immutable.Map(
        42 -> _root_.scala.Some(lexerState10), // '*'
      ),
      elseOn = _root_.scala.Some(lexerState18),
      yields = None,
    )
  
  private lazy val lexerState19: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 19,
      on = _root_.scala.collection.immutable.Map(
        32 -> _root_.scala.Some(lexerState19), // ' '
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState20: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 20,
      on = _root_.scala.collection.immutable.Map(
        109 -> _root_.scala.Some(lexerState13), // 'm'
        115 -> _root_.scala.Some(lexerState21), // 's'
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.char(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState21: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 21,
      on = _root_.scala.collection.immutable.Map(
        116 -> _root_.scala.Some(lexerState33), // 't'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState22: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 22,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState23: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 23,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState24: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 24,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState25: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 25,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState26: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 26,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.char(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState27: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 27,
      on = _root_.scala.collection.immutable.Map(
        48 -> _root_.scala.Some(lexerState27), // '0'
        49 -> _root_.scala.Some(lexerState27), // '1'
        50 -> _root_.scala.Some(lexerState27), // '2'
        51 -> _root_.scala.Some(lexerState27), // '3'
        52 -> _root_.scala.Some(lexerState27), // '4'
        53 -> _root_.scala.Some(lexerState27), // '5'
        54 -> _root_.scala.Some(lexerState27), // '6'
        55 -> _root_.scala.Some(lexerState27), // '7'
        56 -> _root_.scala.Some(lexerState27), // '8'
        57 -> _root_.scala.Some(lexerState27), // '9'
        65 -> _root_.scala.Some(lexerState27), // 'A'
        66 -> _root_.scala.Some(lexerState27), // 'B'
        67 -> _root_.scala.Some(lexerState27), // 'C'
        68 -> _root_.scala.Some(lexerState27), // 'D'
        69 -> _root_.scala.Some(lexerState27), // 'E'
        70 -> _root_.scala.Some(lexerState27), // 'F'
        71 -> _root_.scala.Some(lexerState27), // 'G'
        72 -> _root_.scala.Some(lexerState27), // 'H'
        73 -> _root_.scala.Some(lexerState27), // 'I'
        74 -> _root_.scala.Some(lexerState27), // 'J'
        75 -> _root_.scala.Some(lexerState27), // 'K'
        76 -> _root_.scala.Some(lexerState27), // 'L'
        77 -> _root_.scala.Some(lexerState27), // 'M'
        78 -> _root_.scala.Some(lexerState27), // 'N'
        79 -> _root_.scala.Some(lexerState27), // 'O'
        80 -> _root_.scala.Some(lexerState27), // 'P'
        81 -> _root_.scala.Some(lexerState27), // 'Q'
        82 -> _root_.scala.Some(lexerState27), // 'R'
        83 -> _root_.scala.Some(lexerState27), // 'S'
        84 -> _root_.scala.Some(lexerState27), // 'T'
        85 -> _root_.scala.Some(lexerState27), // 'U'
        86 -> _root_.scala.Some(lexerState27), // 'V'
        87 -> _root_.scala.Some(lexerState27), // 'W'
        88 -> _root_.scala.Some(lexerState27), // 'X'
        89 -> _root_.scala.Some(lexerState27), // 'Y'
        90 -> _root_.scala.Some(lexerState27), // 'Z'
        95 -> _root_.scala.Some(lexerState27), // '_'
        97 -> _root_.scala.Some(lexerState27), // 'a'
        98 -> _root_.scala.Some(lexerState27), // 'b'
        99 -> _root_.scala.Some(lexerState27), // 'c'
        100 -> _root_.scala.Some(lexerState27), // 'd'
        101 -> _root_.scala.Some(lexerState27), // 'e'
        102 -> _root_.scala.Some(lexerState27), // 'f'
        103 -> _root_.scala.Some(lexerState27), // 'g'
        104 -> _root_.scala.Some(lexerState27), // 'h'
        105 -> _root_.scala.Some(lexerState27), // 'i'
        106 -> _root_.scala.Some(lexerState27), // 'j'
        107 -> _root_.scala.Some(lexerState27), // 'k'
        108 -> _root_.scala.Some(lexerState27), // 'l'
        109 -> _root_.scala.Some(lexerState27), // 'm'
        110 -> _root_.scala.Some(lexerState27), // 'n'
        111 -> _root_.scala.Some(lexerState27), // 'o'
        112 -> _root_.scala.Some(lexerState27), // 'p'
        113 -> _root_.scala.Some(lexerState27), // 'q'
        114 -> _root_.scala.Some(lexerState27), // 'r'
        115 -> _root_.scala.Some(lexerState27), // 's'
        116 -> _root_.scala.Some(lexerState27), // 't'
        117 -> _root_.scala.Some(lexerState27), // 'u'
        118 -> _root_.scala.Some(lexerState27), // 'v'
        119 -> _root_.scala.Some(lexerState27), // 'w'
        120 -> _root_.scala.Some(lexerState27), // 'x'
        121 -> _root_.scala.Some(lexerState27), // 'y'
        122 -> _root_.scala.Some(lexerState27), // 'z'
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.term(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState28: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 28,
      on = _root_.scala.collection.immutable.Map(
        58 -> _root_.scala.Some(lexerState7), // ':'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState29: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 29,
      on = _root_.scala.collection.immutable.Map(
        47 -> _root_.scala.Some(lexerState25), // '/'
      ),
      elseOn = _root_.scala.Some(lexerState6),
      yields = None,
    )
  
  private lazy val lexerState30: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 30,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState46)),
        ),
      ),
    )
  
  private lazy val lexerState31: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 31,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (1, 1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.escChar(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState32: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 32,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState41)),
        ),
      ),
    )
  
  private lazy val lexerState33: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 33,
      on = _root_.scala.collection.immutable.Map(
        97 -> _root_.scala.Some(lexerState45), // 'a'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState34: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 34,
      on = _root_.scala.collection.immutable.Map(
        101 -> _root_.scala.Some(lexerState28), // 'e'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState35: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 35,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState12), // '\t'
        10 -> _root_.scala.Some(lexerState65), // '\n'
        32 -> _root_.scala.Some(lexerState12), // ' '
        65 -> _root_.scala.Some(lexerState54), // 'A'
        66 -> _root_.scala.Some(lexerState54), // 'B'
        67 -> _root_.scala.Some(lexerState54), // 'C'
        68 -> _root_.scala.Some(lexerState54), // 'D'
        69 -> _root_.scala.Some(lexerState54), // 'E'
        70 -> _root_.scala.Some(lexerState54), // 'F'
        71 -> _root_.scala.Some(lexerState54), // 'G'
        72 -> _root_.scala.Some(lexerState54), // 'H'
        73 -> _root_.scala.Some(lexerState54), // 'I'
        74 -> _root_.scala.Some(lexerState54), // 'J'
        75 -> _root_.scala.Some(lexerState54), // 'K'
        76 -> _root_.scala.Some(lexerState54), // 'L'
        77 -> _root_.scala.Some(lexerState54), // 'M'
        78 -> _root_.scala.Some(lexerState54), // 'N'
        79 -> _root_.scala.Some(lexerState54), // 'O'
        80 -> _root_.scala.Some(lexerState54), // 'P'
        81 -> _root_.scala.Some(lexerState54), // 'Q'
        82 -> _root_.scala.Some(lexerState54), // 'R'
        83 -> _root_.scala.Some(lexerState54), // 'S'
        84 -> _root_.scala.Some(lexerState54), // 'T'
        85 -> _root_.scala.Some(lexerState54), // 'U'
        86 -> _root_.scala.Some(lexerState54), // 'V'
        87 -> _root_.scala.Some(lexerState54), // 'W'
        88 -> _root_.scala.Some(lexerState54), // 'X'
        89 -> _root_.scala.Some(lexerState54), // 'Y'
        90 -> _root_.scala.Some(lexerState54), // 'Z'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState36: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 36,
      on = _root_.scala.collection.immutable.Map(
        42 -> _root_.scala.Some(lexerState6), // '*'
        47 -> _root_.scala.Some(lexerState62), // '/'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState37: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 37,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState38: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 38,
      on = _root_.scala.collection.immutable.Map(
        10 -> _root_.scala.Some(lexerState53), // '\n'
      ),
      elseOn = _root_.scala.Some(lexerState38),
      yields = None,
    )
  
  private lazy val lexerState39: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 39,
      on = _root_.scala.collection.immutable.Map(
        48 -> _root_.scala.Some(lexerState39), // '0'
        49 -> _root_.scala.Some(lexerState39), // '1'
        50 -> _root_.scala.Some(lexerState39), // '2'
        51 -> _root_.scala.Some(lexerState39), // '3'
        52 -> _root_.scala.Some(lexerState39), // '4'
        53 -> _root_.scala.Some(lexerState39), // '5'
        54 -> _root_.scala.Some(lexerState39), // '6'
        55 -> _root_.scala.Some(lexerState39), // '7'
        56 -> _root_.scala.Some(lexerState39), // '8'
        57 -> _root_.scala.Some(lexerState39), // '9'
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.int(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState40: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 40,
      on = _root_.scala.collection.immutable.Map(
        32 -> _root_.scala.Some(lexerState19), // ' '
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.char(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState41: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 41,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState48), // '\t'
        32 -> _root_.scala.Some(lexerState48), // ' '
        44 -> _root_.scala.Some(lexerState24), // ','
        45 -> _root_.scala.Some(lexerState67), // '-'
        48 -> _root_.scala.Some(lexerState52), // '0'
        49 -> _root_.scala.Some(lexerState52), // '1'
        50 -> _root_.scala.Some(lexerState52), // '2'
        51 -> _root_.scala.Some(lexerState52), // '3'
        52 -> _root_.scala.Some(lexerState52), // '4'
        53 -> _root_.scala.Some(lexerState52), // '5'
        54 -> _root_.scala.Some(lexerState52), // '6'
        55 -> _root_.scala.Some(lexerState52), // '7'
        56 -> _root_.scala.Some(lexerState52), // '8'
        57 -> _root_.scala.Some(lexerState52), // '9'
        125 -> _root_.scala.Some(lexerState3), // '}'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState42: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 42,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (1, 1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.escChar(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState43: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 43,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState49)),
        ),
      ),
    )
  
  private lazy val lexerState44: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 44,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState58)),
        ),
      ),
    )
  
  private lazy val lexerState45: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 45,
      on = _root_.scala.collection.immutable.Map(
        114 -> _root_.scala.Some(lexerState60), // 'r'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState46: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 46,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState56), // '\t'
        10 -> _root_.scala.Some(lexerState23), // '\n'
        32 -> _root_.scala.Some(lexerState56), // ' '
        34 -> _root_.scala.Some(lexerState44), // '\"'
        44 -> _root_.scala.Some(lexerState55), // ','
        45 -> _root_.scala.Some(lexerState16), // '-'
        47 -> _root_.scala.Some(lexerState36), // '/'
        48 -> _root_.scala.Some(lexerState39), // '0'
        49 -> _root_.scala.Some(lexerState39), // '1'
        50 -> _root_.scala.Some(lexerState39), // '2'
        51 -> _root_.scala.Some(lexerState39), // '3'
        52 -> _root_.scala.Some(lexerState39), // '4'
        53 -> _root_.scala.Some(lexerState39), // '5'
        54 -> _root_.scala.Some(lexerState39), // '6'
        55 -> _root_.scala.Some(lexerState39), // '7'
        56 -> _root_.scala.Some(lexerState39), // '8'
        57 -> _root_.scala.Some(lexerState39), // '9'
        60 -> _root_.scala.Some(lexerState17), // '<'
        62 -> _root_.scala.Some(lexerState2), // '>'
        64 -> _root_.scala.Some(lexerState55), // '@'
        65 -> _root_.scala.Some(lexerState11), // 'A'
        66 -> _root_.scala.Some(lexerState11), // 'B'
        67 -> _root_.scala.Some(lexerState11), // 'C'
        68 -> _root_.scala.Some(lexerState11), // 'D'
        69 -> _root_.scala.Some(lexerState11), // 'E'
        70 -> _root_.scala.Some(lexerState11), // 'F'
        71 -> _root_.scala.Some(lexerState11), // 'G'
        72 -> _root_.scala.Some(lexerState11), // 'H'
        73 -> _root_.scala.Some(lexerState11), // 'I'
        74 -> _root_.scala.Some(lexerState11), // 'J'
        75 -> _root_.scala.Some(lexerState11), // 'K'
        76 -> _root_.scala.Some(lexerState11), // 'L'
        77 -> _root_.scala.Some(lexerState11), // 'M'
        78 -> _root_.scala.Some(lexerState11), // 'N'
        79 -> _root_.scala.Some(lexerState11), // 'O'
        80 -> _root_.scala.Some(lexerState11), // 'P'
        81 -> _root_.scala.Some(lexerState11), // 'Q'
        82 -> _root_.scala.Some(lexerState11), // 'R'
        83 -> _root_.scala.Some(lexerState11), // 'S'
        84 -> _root_.scala.Some(lexerState11), // 'T'
        85 -> _root_.scala.Some(lexerState11), // 'U'
        86 -> _root_.scala.Some(lexerState11), // 'V'
        87 -> _root_.scala.Some(lexerState11), // 'W'
        88 -> _root_.scala.Some(lexerState11), // 'X'
        89 -> _root_.scala.Some(lexerState11), // 'Y'
        90 -> _root_.scala.Some(lexerState11), // 'Z'
        91 -> _root_.scala.Some(lexerState55), // '['
        93 -> _root_.scala.Some(lexerState55), // ']'
        97 -> _root_.scala.Some(lexerState27), // 'a'
        98 -> _root_.scala.Some(lexerState27), // 'b'
        99 -> _root_.scala.Some(lexerState27), // 'c'
        100 -> _root_.scala.Some(lexerState27), // 'd'
        101 -> _root_.scala.Some(lexerState27), // 'e'
        102 -> _root_.scala.Some(lexerState27), // 'f'
        103 -> _root_.scala.Some(lexerState27), // 'g'
        104 -> _root_.scala.Some(lexerState27), // 'h'
        105 -> _root_.scala.Some(lexerState27), // 'i'
        106 -> _root_.scala.Some(lexerState27), // 'j'
        107 -> _root_.scala.Some(lexerState27), // 'k'
        108 -> _root_.scala.Some(lexerState27), // 'l'
        109 -> _root_.scala.Some(lexerState27), // 'm'
        110 -> _root_.scala.Some(lexerState27), // 'n'
        111 -> _root_.scala.Some(lexerState27), // 'o'
        112 -> _root_.scala.Some(lexerState27), // 'p'
        113 -> _root_.scala.Some(lexerState27), // 'q'
        114 -> _root_.scala.Some(lexerState27), // 'r'
        115 -> _root_.scala.Some(lexerState27), // 's'
        116 -> _root_.scala.Some(lexerState27), // 't'
        117 -> _root_.scala.Some(lexerState27), // 'u'
        118 -> _root_.scala.Some(lexerState27), // 'v'
        119 -> _root_.scala.Some(lexerState27), // 'w'
        120 -> _root_.scala.Some(lexerState27), // 'x'
        121 -> _root_.scala.Some(lexerState27), // 'y'
        122 -> _root_.scala.Some(lexerState27), // 'z'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState47: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 47,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (1, 1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.escChars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState48: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 48,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState48), // '\t'
        32 -> _root_.scala.Some(lexerState48), // ' '
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState49: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 49,
      on = _root_.scala.collection.immutable.Map(
        45 -> _root_.scala.Some(lexerState61), // '-'
        92 -> _root_.scala.Some(lexerState66), // '\\'
        93 -> _root_.scala.Some(lexerState37), // ']'
        94 -> _root_.scala.Some(lexerState61), // '^'
      ),
      elseOn = _root_.scala.Some(lexerState51),
      yields = None,
    )
  
  private lazy val lexerState50: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 50,
      on = _root_.scala.collection.immutable.Map(
        34 -> _root_.scala.None, // '\"'
        92 -> _root_.scala.None, // '\\'
      ),
      elseOn = _root_.scala.Some(lexerState50),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.chars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState51: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 51,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.char(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState52: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 52,
      on = _root_.scala.collection.immutable.Map(
        48 -> _root_.scala.Some(lexerState52), // '0'
        49 -> _root_.scala.Some(lexerState52), // '1'
        50 -> _root_.scala.Some(lexerState52), // '2'
        51 -> _root_.scala.Some(lexerState52), // '3'
        52 -> _root_.scala.Some(lexerState52), // '4'
        53 -> _root_.scala.Some(lexerState52), // '5'
        54 -> _root_.scala.Some(lexerState52), // '6'
        55 -> _root_.scala.Some(lexerState52), // '7'
        56 -> _root_.scala.Some(lexerState52), // '8'
        57 -> _root_.scala.Some(lexerState52), // '9'
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.int(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState53: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 53,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState54: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 54,
      on = _root_.scala.collection.immutable.Map(
        48 -> _root_.scala.Some(lexerState54), // '0'
        49 -> _root_.scala.Some(lexerState54), // '1'
        50 -> _root_.scala.Some(lexerState54), // '2'
        51 -> _root_.scala.Some(lexerState54), // '3'
        52 -> _root_.scala.Some(lexerState54), // '4'
        53 -> _root_.scala.Some(lexerState54), // '5'
        54 -> _root_.scala.Some(lexerState54), // '6'
        55 -> _root_.scala.Some(lexerState54), // '7'
        56 -> _root_.scala.Some(lexerState54), // '8'
        57 -> _root_.scala.Some(lexerState54), // '9'
        65 -> _root_.scala.Some(lexerState54), // 'A'
        66 -> _root_.scala.Some(lexerState54), // 'B'
        67 -> _root_.scala.Some(lexerState54), // 'C'
        68 -> _root_.scala.Some(lexerState54), // 'D'
        69 -> _root_.scala.Some(lexerState54), // 'E'
        70 -> _root_.scala.Some(lexerState54), // 'F'
        71 -> _root_.scala.Some(lexerState54), // 'G'
        72 -> _root_.scala.Some(lexerState54), // 'H'
        73 -> _root_.scala.Some(lexerState54), // 'I'
        74 -> _root_.scala.Some(lexerState54), // 'J'
        75 -> _root_.scala.Some(lexerState54), // 'K'
        76 -> _root_.scala.Some(lexerState54), // 'L'
        77 -> _root_.scala.Some(lexerState54), // 'M'
        78 -> _root_.scala.Some(lexerState54), // 'N'
        79 -> _root_.scala.Some(lexerState54), // 'O'
        80 -> _root_.scala.Some(lexerState54), // 'P'
        81 -> _root_.scala.Some(lexerState54), // 'Q'
        82 -> _root_.scala.Some(lexerState54), // 'R'
        83 -> _root_.scala.Some(lexerState54), // 'S'
        84 -> _root_.scala.Some(lexerState54), // 'T'
        85 -> _root_.scala.Some(lexerState54), // 'U'
        86 -> _root_.scala.Some(lexerState54), // 'V'
        87 -> _root_.scala.Some(lexerState54), // 'W'
        88 -> _root_.scala.Some(lexerState54), // 'X'
        89 -> _root_.scala.Some(lexerState54), // 'Y'
        90 -> _root_.scala.Some(lexerState54), // 'Z'
        95 -> _root_.scala.Some(lexerState54), // '_'
        97 -> _root_.scala.Some(lexerState54), // 'a'
        98 -> _root_.scala.Some(lexerState54), // 'b'
        99 -> _root_.scala.Some(lexerState54), // 'c'
        100 -> _root_.scala.Some(lexerState54), // 'd'
        101 -> _root_.scala.Some(lexerState54), // 'e'
        102 -> _root_.scala.Some(lexerState54), // 'f'
        103 -> _root_.scala.Some(lexerState54), // 'g'
        104 -> _root_.scala.Some(lexerState54), // 'h'
        105 -> _root_.scala.Some(lexerState54), // 'i'
        106 -> _root_.scala.Some(lexerState54), // 'j'
        107 -> _root_.scala.Some(lexerState54), // 'k'
        108 -> _root_.scala.Some(lexerState54), // 'l'
        109 -> _root_.scala.Some(lexerState54), // 'm'
        110 -> _root_.scala.Some(lexerState54), // 'n'
        111 -> _root_.scala.Some(lexerState54), // 'o'
        112 -> _root_.scala.Some(lexerState54), // 'p'
        113 -> _root_.scala.Some(lexerState54), // 'q'
        114 -> _root_.scala.Some(lexerState54), // 'r'
        115 -> _root_.scala.Some(lexerState54), // 's'
        116 -> _root_.scala.Some(lexerState54), // 't'
        117 -> _root_.scala.Some(lexerState54), // 'u'
        118 -> _root_.scala.Some(lexerState54), // 'v'
        119 -> _root_.scala.Some(lexerState54), // 'w'
        120 -> _root_.scala.Some(lexerState54), // 'x'
        121 -> _root_.scala.Some(lexerState54), // 'y'
        122 -> _root_.scala.Some(lexerState54), // 'z'
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.mode(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState55: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 55,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState56: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 56,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState56), // '\t'
        32 -> _root_.scala.Some(lexerState56), // ' '
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState57: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 57,
      on = _root_.scala.collection.immutable.Map(
        34 -> _root_.scala.Some(lexerState31), // '\"'
        92 -> _root_.scala.Some(lexerState31), // '\\'
        110 -> _root_.scala.Some(lexerState31), // 'n'
        116 -> _root_.scala.Some(lexerState31), // 't'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState58: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 58,
      on = _root_.scala.collection.immutable.Map(
        34 -> _root_.scala.Some(lexerState14), // '\"'
        92 -> _root_.scala.Some(lexerState57), // '\\'
      ),
      elseOn = _root_.scala.Some(lexerState50),
      yields = None,
    )
  
  private lazy val lexerState59: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 59,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (1, 1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.escChar(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState60: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 60,
      on = _root_.scala.collection.immutable.Map(
        116 -> _root_.scala.Some(lexerState28), // 't'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState61: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 61,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState62: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 62,
      on = _root_.scala.collection.immutable.Map(
        10 -> _root_.scala.Some(lexerState9), // '\n'
      ),
      elseOn = _root_.scala.Some(lexerState62),
      yields = None,
    )
  
  private lazy val lexerState63: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 63,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.escChars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState64: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 64,
      on = _root_.scala.collection.immutable.Map(
        40 -> _root_.scala.Some(lexerState42), // '('
        41 -> _root_.scala.Some(lexerState42), // ')'
        42 -> _root_.scala.Some(lexerState42), // '*'
        43 -> _root_.scala.Some(lexerState42), // '+'
        46 -> _root_.scala.Some(lexerState42), // '.'
        47 -> _root_.scala.Some(lexerState42), // '/'
        59 -> _root_.scala.Some(lexerState42), // ';'
        63 -> _root_.scala.Some(lexerState42), // '?'
        64 -> _root_.scala.Some(lexerState42), // '@'
        91 -> _root_.scala.Some(lexerState42), // '['
        92 -> _root_.scala.Some(lexerState42), // '\\'
        93 -> _root_.scala.Some(lexerState42), // ']'
        100 -> _root_.scala.Some(lexerState47), // 'd'
        110 -> _root_.scala.Some(lexerState42), // 'n'
        116 -> _root_.scala.Some(lexerState42), // 't'
        123 -> _root_.scala.Some(lexerState42), // '{'
        124 -> _root_.scala.Some(lexerState42), // '|'
        125 -> _root_.scala.Some(lexerState42), // '}'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState65: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 65,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState66: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 66,
      on = _root_.scala.collection.immutable.Map(
        45 -> _root_.scala.Some(lexerState59), // '-'
        92 -> _root_.scala.Some(lexerState59), // '\\'
        93 -> _root_.scala.Some(lexerState59), // ']'
        94 -> _root_.scala.Some(lexerState59), // '^'
        100 -> _root_.scala.Some(lexerState1), // 'd'
        110 -> _root_.scala.Some(lexerState59), // 'n'
        116 -> _root_.scala.Some(lexerState59), // 't'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState67: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 67,
      on = _root_.scala.collection.immutable.Map(
        48 -> _root_.scala.Some(lexerState52), // '0'
        49 -> _root_.scala.Some(lexerState52), // '1'
        50 -> _root_.scala.Some(lexerState52), // '2'
        51 -> _root_.scala.Some(lexerState52), // '3'
        52 -> _root_.scala.Some(lexerState52), // '4'
        53 -> _root_.scala.Some(lexerState52), // '5'
        54 -> _root_.scala.Some(lexerState52), // '6'
        55 -> _root_.scala.Some(lexerState52), // '7'
        56 -> _root_.scala.Some(lexerState52), // '8'
        57 -> _root_.scala.Some(lexerState52), // '9'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  val lexer: _root_.slyce.parse.Lexer[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer[_root_.slyce.generate.parsers.Lexer.Terminal](lexerState0)
  
  // =====| Grammar |=====
  
  lazy val grammarState0: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 0,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@start:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState13)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer => grammarState163
      },
    )
  
  lazy val grammarState1: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 1,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState134)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState140)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState110)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState136)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState103)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._2, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner => grammarState62
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail => grammarState38
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState106
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState70
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState10
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line => grammarState113
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState99
      },
    )
  
  lazy val grammarState2: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 2,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState112)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState160)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState154
      },
    )
  
  lazy val grammarState3: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 3,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState4: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 4,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState52)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState5: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 5,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState6: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 6,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState114)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState7: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 7,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState69)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState8: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 8,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState64)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState15)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState159)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState16)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState145
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState128
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState80
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState58
      },
    )
  
  lazy val grammarState9: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 9,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState96)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState10: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 10,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState11: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 11,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState12: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 12,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState75)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState122)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char => grammarState24
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head => grammarState156
      },
    )
  
  lazy val grammarState13: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 13,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.mode) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState36)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState14: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 14,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState143)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState138)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState150
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState30
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head => grammarState19
      },
    )
  
  lazy val grammarState15: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 15,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState64)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState147)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState54)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState16)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner => grammarState125
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState116
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState58
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState128
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState63
      },
    )
  
  lazy val grammarState16: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 16,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState17: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 17,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState18: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 18,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState19: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 19,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState117)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState20: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 20,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState112)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState160)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState154
      },
    )
  
  lazy val grammarState21: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 21,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState22: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 22,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._1(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState23: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 23,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState24: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 24,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState75)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState122)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char => grammarState157
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail => grammarState44
      },
    )
  
  lazy val grammarState25: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 25,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState152)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState81)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState26: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 26,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`^`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`^`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`^`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState27: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 27,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState25)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState94)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState28: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 28,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.term) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState79)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState18)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState12)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw => grammarState11
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType => grammarState111
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield => grammarState29
      },
    )
  
  lazy val grammarState29: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 29,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState28)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail => grammarState86
      },
    )
  
  lazy val grammarState30: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 30,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState2)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState31: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 31,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState32: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 32,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState134)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState103)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState140)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState110)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState136)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner => grammarState62
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head => grammarState93
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState106
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState70
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState10
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line => grammarState1
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState99
      },
    )
  
  lazy val grammarState33: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 33,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState143)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState138)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState132
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState57
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head => grammarState7
      },
    )
  
  lazy val grammarState34: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 34,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState35: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 35,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState36: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 36,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState109)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head => grammarState162
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode => grammarState77
      },
    )
  
  lazy val grammarState37: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 37,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState38: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 38,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState39: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 39,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState61)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState129)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState40: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 40,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState26)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^` => grammarState102
      },
    )
  
  lazy val grammarState41: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 41,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState42: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 42,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState6)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState129)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState43: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 43,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState143)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState37)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState138)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState43
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail => grammarState65
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState130
      },
    )
  
  lazy val grammarState44: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 44,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState45: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 45,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState92)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState129)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState46: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 46,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState98)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState48)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState47: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 47,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState48: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 48,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState68)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState49: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 49,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState85)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState55)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState50: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 50,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState158)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState51: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 51,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState5)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState52: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 52,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState5)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState53: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 53,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`|`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState54: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 54,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState26)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^` => grammarState33
      },
    )
  
  lazy val grammarState55: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 55,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState95)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState56: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 56,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState57: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 57,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState153)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState58: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 58,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState59: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 59,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState18)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState12)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.term) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState79)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head => grammarState78
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw => grammarState11
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType => grammarState111
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield => grammarState104
      },
    )
  
  lazy val grammarState60: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 60,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState61: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 61,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState114)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState62: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 62,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState59)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState63: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 63,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState127)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState118
      },
    )
  
  lazy val grammarState64: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 64,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState65: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 65,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState66: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 66,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState143)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState37)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState138)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState66
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail => grammarState65
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState57
      },
    )
  
  lazy val grammarState67: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 67,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState143)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState37)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState138)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState43
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail => grammarState135
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState130
      },
    )
  
  lazy val grammarState68: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 68,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState5)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState69: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 69,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState70: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 70,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState71: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 71,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState72: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 72,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState115)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState73: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 73,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState51)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState74: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 74,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState75: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 75,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState76: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 76,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState77: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 77,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState109)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode => grammarState151
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail => grammarState34
      },
    )
  
  lazy val grammarState78: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 78,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState101)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState105)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState165)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode => grammarState170
      },
    )
  
  lazy val grammarState79: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 79,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState80: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 80,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState8)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState108
      },
    )
  
  lazy val grammarState81: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 81,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState82: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 82,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState83: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 83,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState84: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 84,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState85: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 85,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState146)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState148)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState86: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 86,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState87: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 87,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState91)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState53
      },
    )
  
  lazy val grammarState88: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 88,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState64)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState149)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState40)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState161)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState119)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState133)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState16)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState88
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState58
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState128
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant => grammarState89
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState17
      },
    )
  
  lazy val grammarState89: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 89,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState90: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 90,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState143)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState138)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState132
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState57
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head => grammarState100
      },
    )
  
  lazy val grammarState91: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 91,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState134)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState103)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState140)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState110)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState136)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState106
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState10
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState87
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState70
      },
    )
  
  lazy val grammarState92: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 92,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState114)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState93: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 93,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState94: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 94,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState72)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState95: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 95,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState31)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState96: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 96,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState97: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 97,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState98: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 98,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState84)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState39)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState99: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 99,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState91)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState83
      },
    )
  
  lazy val grammarState100: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 100,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState69)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState101: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 101,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.mode) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState76)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState102: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 102,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState143)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState138)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState37)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState67
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState130
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head => grammarState107
      },
    )
  
  lazy val grammarState103: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 103,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState104: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 104,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState28)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail => grammarState47
      },
    )
  
  lazy val grammarState105: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 105,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.mode) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState71)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState106: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 106,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState134)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState103)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState140)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState110)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState49)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState97)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState56)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState136)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState82)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState106
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState70
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState10
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant => grammarState41
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState124
      },
    )
  
  lazy val grammarState107: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 107,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState69)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState108: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 108,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`|`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState109: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 109,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.mode) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState32)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState110: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 110,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState26)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^` => grammarState14
      },
    )
  
  lazy val grammarState111: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 111,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.mode) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState27)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState27)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`@`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.term) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString => grammarState3
      },
    )
  
  lazy val grammarState112: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 112,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState113: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 113,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState134)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState140)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState110)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState136)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState103)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._2, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner => grammarState62
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail => grammarState22
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState106
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState70
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState10
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line => grammarState113
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState99
      },
    )
  
  lazy val grammarState114: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 114,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState115: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 115,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState116: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 116,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState64)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState147)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState54)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState131)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState119)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState133)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState16)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState116
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState58
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState128
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant => grammarState89
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState17
      },
    )
  
  lazy val grammarState117: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 117,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState118: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 118,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState119: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 119,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState120: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 120,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState121: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 121,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState122: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 122,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState123: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 123,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState60)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState124: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 124,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState125: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 125,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState121)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState126: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 126,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState84)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState42)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState127: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 127,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState64)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState147)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState54)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState16)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState116
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState128
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState141
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState58
      },
    )
  
  lazy val grammarState128: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 128,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState129: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 129,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState130: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 130,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState20)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState131: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 131,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState126)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState73)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState132: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 132,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState143)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState37)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState138)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState66
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail => grammarState135
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState57
      },
    )
  
  lazy val grammarState133: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 133,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState134: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 134,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState135: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 135,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState136: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 136,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState137: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 137,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState144)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState108
      },
    )
  
  lazy val grammarState138: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 138,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState139: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 139,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState143)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState37)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState138)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState139
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail => grammarState65
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState30
      },
    )
  
  lazy val grammarState140: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 140,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState64)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState149)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState40)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState16)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner => grammarState123
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState88
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState58
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState128
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState168
      },
    )
  
  lazy val grammarState141: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 141,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState127)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState108
      },
    )
  
  lazy val grammarState142: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 142,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState121)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState143: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 143,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState144: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 144,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState64)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState149)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState40)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState16)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState88
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState128
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState137
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState58
      },
    )
  
  lazy val grammarState145: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 145,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState64)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState15)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState159)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState46)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState119)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState133)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState16)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState145
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState58
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState128
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant => grammarState89
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState17
      },
    )
  
  lazy val grammarState146: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 146,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState147: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 147,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState64)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState147)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState54)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState16)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner => grammarState142
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState116
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState58
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState128
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState63
      },
    )
  
  lazy val grammarState148: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 148,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState9)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState23)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState149: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 149,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState64)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState15)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState159)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState16)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner => grammarState166
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState145
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState58
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState128
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState155
      },
    )
  
  lazy val grammarState150: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 150,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState143)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState37)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState138)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState139
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail => grammarState135
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState30
      },
    )
  
  lazy val grammarState151: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 151,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState109)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode => grammarState151
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail => grammarState169
      },
    )
  
  lazy val grammarState152: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 152,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState50)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState120)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState153: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 153,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState112)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState160)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState154
      },
    )
  
  lazy val grammarState154: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 154,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`-`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`-`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`-`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`-`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState155: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 155,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState8)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState118
      },
    )
  
  lazy val grammarState156: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 156,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState35)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState157: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 157,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState75)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState122)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char => grammarState157
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail => grammarState74
      },
    )
  
  lazy val grammarState158: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 158,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState159: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 159,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState26)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^` => grammarState90
      },
    )
  
  lazy val grammarState160: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 160,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState161: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 161,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState164)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState4)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState162: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 162,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@start:`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState163: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 163,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Accept[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(root: _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer), _) :: _root_.scala.Nil => root
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState164: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 164,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState84)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState45)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState165: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 165,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState166: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 166,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState121)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState167: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 167,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState168: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 168,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState144)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState118
      },
    )
  
  lazy val grammarState169: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 169,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState170: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 170,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  val grammar: _root_.slyce.parse.Grammar[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState0)
  
}

// format: on
