// !!! DO NOT MODIFY !!!
// File was automatically generated by slyce

package slyce.generate.parsers

// format: off

object Lexer extends _root_.slyce.parse.Parser {
  
  override type NTRoot = _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer
  
  // =====| Terminals |=====
  
  sealed abstract class Terminal(final val tokName: _root_.scala.Predef.String) extends _root_.slyce.core.Token
  object Terminal {
    final case class char(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("char")
                                                                                                    with _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar.Lift
    final case class chars(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("chars")
                                                                                                     with _root_.slyce.generate.parsers.Lexer.NonTerminal.Char.Lift
    final case class escChar(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("escChar")
                                                                                                       with _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar.Lift
                                                                                                       with _root_.slyce.generate.parsers.Lexer.NonTerminal.Char.Lift
    final case class escChars(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("escChars")
    final case class int(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("int")
    final case class mode(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("mode")
    final case class term(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("term")
                                                                                                    with _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType.Lift
    
    final case class `\"`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""\""""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `(`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""("""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `)`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("""")"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `*`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""*"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `+`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""+"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `,`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("""","""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `-`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""-"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `->`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""->"""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `;`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("""";"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `<-`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""<-"""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `>>`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal("""">>"""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `\\?`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""?"""")
                                                                   with _root_.slyce.core.Token.Const
    final case class `@`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""@"""")
                                                                 with _root_.slyce.core.Token.Const
                                                                 with _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType.Lift
    final case class `@mode:`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""@mode:"""")
                                                                      with _root_.slyce.core.Token.Const
    final case class `@start:`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""@start:"""")
                                                                       with _root_.slyce.core.Token.Const
    final case class `[`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""["""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `]`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""]"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `^`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""^"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `{`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""{"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `|`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""|"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `}`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Lexer.Terminal(""""}"""")
                                                                 with _root_.slyce.core.Token.Const
    
    val __findRawTerminal: _root_.slyce.core.Span.Highlight => PartialFunction[_root_.scala.Predef.String, _root_.slyce.generate.parsers.Lexer.Terminal] =
      span => {
        case "\"" => Terminal.`\"`(span)
        case "(" => Terminal.`(`(span)
        case ")" => Terminal.`)`(span)
        case "*" => Terminal.`*`(span)
        case "+" => Terminal.`+`(span)
        case "," => Terminal.`,`(span)
        case "-" => Terminal.`-`(span)
        case "->" => Terminal.`->`(span)
        case ";" => Terminal.`;`(span)
        case "<-" => Terminal.`<-`(span)
        case ">>" => Terminal.`>>`(span)
        case "?" => Terminal.`\\?`(span)
        case "@" => Terminal.`@`(span)
        case "@mode:" => Terminal.`@mode:`(span)
        case "@start:" => Terminal.`@start:`(span)
        case "[" => Terminal.`[`(span)
        case "]" => Terminal.`]`(span)
        case "^" => Terminal.`^`(span)
        case "{" => Terminal.`{`(span)
        case "|" => Terminal.`|`(span)
        case "}" => Terminal.`}`(span)
      }
  }
  
  // =====| Non-Terminals |=====
  
  sealed abstract class NonTerminal(final val ntName: _root_.scala.Predef.String) extends _root_.slyce.core.NonTerminal
  object NonTerminal {
    
    final case class AnonList0Head(
      _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList0Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail._1(lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList0Head {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode
      
    }
    
    sealed abstract class AnonList0Tail extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList0Tail")
    object AnonList0Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail
      
    }
    
    final case class AnonList1Head(
      _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList1Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._1(lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList1Head {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.Line
      
    }
    
    sealed abstract class AnonList1Tail extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList1Tail")
    object AnonList1Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail
      
    }
    
    sealed abstract class AnonList2Head extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList2Head") {
      
      final def toList: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_, lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2 => stack.reverse
          }
        
        this match {
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(lift, next) => loop(next, lift :: Nil)
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2 => Nil
        }
      }
      
    }
    object AnonList2Head {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head
      
    }
    
    sealed abstract class AnonList2Tail extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList2Tail")
    object AnonList2Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield,
        _3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail
      
    }
    
    final case class AnonList3Head(
      _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList3Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail._1(lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList3Head {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.Char
      
    }
    
    sealed abstract class AnonList3Tail extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList3Tail")
    object AnonList3Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail
      
    }
    
    final case class AnonList4Head(
      _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList4Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._1(lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList4Head {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars
      
    }
    
    sealed abstract class AnonList4Tail extends _root_.slyce.generate.parsers.Lexer.NonTerminal("AnonList4Tail")
    object AnonList4Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail
      
    }
    
    sealed abstract class CCChar extends _root_.slyce.generate.parsers.Lexer.NonTerminal("CCChar") {
      
      final def lift: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar.Lift =
        this match {
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(lift) => lift
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(lift) => lift
        }
      
    }
    object CCChar {
      
      sealed trait Lift extends _root_.slyce.core.Token
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.char,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar
      
    }
    
    sealed abstract class CCChars extends _root_.slyce.generate.parsers.Lexer.NonTerminal("CCChars")
    object CCChars {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.`-`,
        _3: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars
      
    }
    
    sealed abstract class Char extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Char") {
      
      final def lift: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char.Lift =
        this match {
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._1(lift) => lift
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._2(lift) => lift
        }
      
    }
    object Char {
      
      sealed trait Lift extends _root_.slyce.core.Token
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.chars,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Char
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Char
      
    }
    
    sealed abstract class CharClass extends _root_.slyce.generate.parsers.Lexer.NonTerminal("CharClass")
    object CharClass {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`,
        _3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head,
        _4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.char,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass
      
      final case class _4(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass
      
    }
    
    final case class Group(
      _1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner,
      _3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Group") {
      
      final def lift: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group.Lift = this._2
      
    }
    object Group {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner
      
    }
    
    final case class GroupInner(
      _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("GroupInner") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._1(_, lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object GroupInner {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence
      
    }
    
    sealed abstract class GroupInnerTail extends _root_.slyce.generate.parsers.Lexer.NonTerminal("GroupInnerTail")
    object GroupInnerTail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`|`,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence,
        _3: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail
      
    }
    
    final case class Lexer(
      _1: _root_.slyce.generate.parsers.Lexer.Terminal.`@start:`,
      _2: _root_.slyce.generate.parsers.Lexer.Terminal.mode,
      _3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Lexer")
    
    final case class Line(
      _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner,
      _2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`,
      _3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head,
      _4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Line")
    
    final case class Mode(
      _1: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`,
      _2: _root_.slyce.generate.parsers.Lexer.Terminal.mode,
      _3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Mode")
    
    sealed abstract class Quant extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Quant")
    object Quant {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant
      
      final case class _4(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant
      
      final case class _5(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`,
        _4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant
      
      final case class _6(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant
      
      final case class _7(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`,
        _4: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant
      
    }
    
    final case class Raw(
      _1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head,
      _3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Raw")
      with _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType.Lift {
      
      final def lift: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw.Lift = this._2
      
    }
    object Raw {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head
      
    }
    
    sealed abstract class Regex extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Regex")
    object Regex {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex
      
    }
    
    sealed abstract class Sequence extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Sequence") {
      
      final def toList: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence, stack: _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._1(lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2 => stack.reverse
          }
        
        loop(this, Nil)
      }
      
    }
    object Sequence {
      
      type Lift = _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex,
        _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence
      
    }
    
    sealed abstract class SubString extends _root_.slyce.generate.parsers.Lexer.NonTerminal("SubString")
    object SubString {
      
      case object _1 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`,
        _4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString
      
      final case class _4(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString
      
      final case class _5(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`,
        _4: _root_.slyce.generate.parsers.Lexer.Terminal.int,
        _5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString
      
    }
    
    sealed abstract class ToMode extends _root_.slyce.generate.parsers.Lexer.NonTerminal("ToMode")
    object ToMode {
      
      case object _1 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.mode,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`,
        _2: _root_.slyce.generate.parsers.Lexer.Terminal.mode,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode
      
      final case class _4(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode
      
    }
    
    final case class Yield(
      _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType,
      _2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString,
    ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal("Yield")
    
    sealed abstract class YieldType extends _root_.slyce.generate.parsers.Lexer.NonTerminal("YieldType") {
      
      final def lift: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType.Lift =
        this match {
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(lift) => lift
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(lift) => lift
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(lift) => lift
        }
      
    }
    object YieldType {
      
      sealed trait Lift
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.term,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType
      
    }
    
    sealed abstract class `Optional_^` extends _root_.slyce.generate.parsers.Lexer.NonTerminal("`Optional_^`") {
      
      final def toOption: _root_.scala.Option[_root_.slyce.generate.parsers.Lexer.Terminal.`^`] =
        this match {
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._1(lift) => _root_.scala.Some(lift)
          case _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2 => _root_.scala.None
        }
      
    }
    object `Optional_^` {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Lexer.Terminal.`^`,
      ) extends _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`
      
      case object _2 extends _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`
      
    }
    
  }
  
  // =====| Lexer |=====
  
  private lazy val lexerState0: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 0,
      on = _root_.scala.collection.immutable.Map(
        10 -> _root_.scala.Some(lexerState58), // '\n'
        32 -> _root_.scala.Some(lexerState28), // ' '
        40 -> _root_.scala.Some(lexerState48), // '('
        41 -> _root_.scala.Some(lexerState48), // ')'
        42 -> _root_.scala.Some(lexerState48), // '*'
        43 -> _root_.scala.Some(lexerState48), // '+'
        46 -> _root_.scala.Some(lexerState37), // '.'
        47 -> _root_.scala.Some(lexerState38), // '/'
        59 -> _root_.scala.Some(lexerState30), // ';'
        63 -> _root_.scala.Some(lexerState48), // '?'
        64 -> _root_.scala.Some(lexerState59), // '@'
        91 -> _root_.scala.Some(lexerState27), // '['
        92 -> _root_.scala.Some(lexerState35), // '\\'
        123 -> _root_.scala.Some(lexerState18), // '{'
        124 -> _root_.scala.Some(lexerState48), // '|'
      ),
      elseOn = _root_.scala.Some(lexerState9),
      yields = None,
    )
  
  private lazy val lexerState1: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 1,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.escChar(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState2: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 2,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState3: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 3,
      yields = None,
    ) {
      case 58 => _root_.scala.Some(lexerState31) // ':'
    }
  
  private lazy val lexerState4: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 4,
      yields = None,
    ) {
      case 97 => _root_.scala.Some(lexerState17) // 'a'
    }
  
  private lazy val lexerState5: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 5,
      yields = None,
    ) {
      case 10 => _root_.scala.Some(lexerState46) // '\n'
      case _ => _root_.scala.Some(lexerState5)
    }
  
  private lazy val lexerState6: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 6,
      yields = None,
    ) {
      case 42 => _root_.scala.Some(lexerState44) // '*'
      case _ => _root_.scala.Some(lexerState6)
    }
  
  private lazy val lexerState7: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 7,
      yields = None,
    ) {
      case 42 => _root_.scala.Some(lexerState49) // '*'
      case _ => _root_.scala.Some(lexerState7)
    }
  
  private lazy val lexerState8: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 8,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState9: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 9,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.char(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState10: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 10,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.escChar(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState11: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 11,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.mode(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case c if c >= 97 && c <= 122 => _root_.scala.Some(lexerState11) // 'a' - 'z'
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState11) // 'A' - 'Z'
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState11) // '0' - '9'
      case 95 => _root_.scala.Some(lexerState11) // '_'
    }
  
  private lazy val lexerState12: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 12,
      yields = None,
    ) {
      case 100 => _root_.scala.Some(lexerState19) // 'd'
      case _ => _root_.scala.Some(lexerState10)
    }
  
  private lazy val lexerState13: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 13,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.mode(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case c if c >= 97 && c <= 122 => _root_.scala.Some(lexerState13) // 'a' - 'z'
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState13) // 'A' - 'Z'
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState13) // '0' - '9'
      case 95 => _root_.scala.Some(lexerState13) // '_'
    }
  
  private lazy val lexerState14: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 14,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 32 => _root_.scala.Some(lexerState14) // ' '
      case 9 => _root_.scala.Some(lexerState14) // '\t'
    }
  
  private lazy val lexerState15: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 15,
      yields = None,
    ) {
      case 92 => _root_.scala.Some(lexerState12) // '\\'
      case 94 => _root_.scala.Some(lexerState60) // '^'
      case 45 => _root_.scala.Some(lexerState60) // '-'
      case 93 => _root_.scala.Some(lexerState29) // ']'
      case _ => _root_.scala.Some(lexerState45)
    }
  
  private lazy val lexerState16: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 16,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState17: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 17,
      yields = None,
    ) {
      case 114 => _root_.scala.Some(lexerState33) // 'r'
    }
  
  private lazy val lexerState18: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 18,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState20)),
        ),
      ),
    )
  
  private lazy val lexerState19: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 19,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.escChars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState20: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 20,
      yields = None,
    ) {
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState66) // '0' - '9'
      case 45 => _root_.scala.Some(lexerState64) // '-'
      case 125 => _root_.scala.Some(lexerState51) // '}'
      case 44 => _root_.scala.Some(lexerState16) // ','
      case 32 => _root_.scala.Some(lexerState22) // ' '
      case 9 => _root_.scala.Some(lexerState22) // '\t'
    }
  
  private lazy val lexerState21: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 21,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState22: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 22,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 32 => _root_.scala.Some(lexerState22) // ' '
      case 9 => _root_.scala.Some(lexerState22) // '\t'
    }
  
  private lazy val lexerState23: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 23,
      yields = None,
    ) {
      case 92 => _root_.scala.Some(lexerState57) // '\\'
      case 34 => _root_.scala.Some(lexerState67) // '\"'
      case _ => _root_.scala.Some(lexerState53)
    }
  
  private lazy val lexerState24: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 24,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 32 => _root_.scala.Some(lexerState24) // ' '
      case 9 => _root_.scala.Some(lexerState24) // '\t'
    }
  
  private lazy val lexerState25: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 25,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState26: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 26,
      yields = None,
    ) {
      case 62 => _root_.scala.Some(lexerState55) // '>'
    }
  
  private lazy val lexerState27: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 27,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState15)),
        ),
      ),
    )
  
  private lazy val lexerState28: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 28,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.char(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 32 => _root_.scala.Some(lexerState42) // ' '
    }
  
  private lazy val lexerState29: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 29,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState30: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 30,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState63)),
        ),
      ),
    )
  
  private lazy val lexerState31: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 31,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState36)),
        ),
      ),
    )
  
  private lazy val lexerState32: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 32,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState23)),
        ),
      ),
    )
  
  private lazy val lexerState33: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 33,
      yields = None,
    ) {
      case 116 => _root_.scala.Some(lexerState3) // 't'
    }
  
  private lazy val lexerState34: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 34,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.int(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState34) // '0' - '9'
    }
  
  private lazy val lexerState35: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 35,
      yields = None,
    ) {
      case 100 => _root_.scala.Some(lexerState62) // 'd'
      case _ => _root_.scala.Some(lexerState41)
    }
  
  private lazy val lexerState36: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 36,
      yields = None,
    ) {
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState13) // 'A' - 'Z'
      case 10 => _root_.scala.Some(lexerState65) // '\n'
      case 32 => _root_.scala.Some(lexerState14) // ' '
      case 9 => _root_.scala.Some(lexerState14) // '\t'
    }
  
  private lazy val lexerState37: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 37,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.escChars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState38: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 38,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.char(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 42 => _root_.scala.Some(lexerState6) // '*'
      case 47 => _root_.scala.Some(lexerState50) // '/'
    }
  
  private lazy val lexerState39: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 39,
      yields = None,
    ) {
      case 111 => _root_.scala.Some(lexerState47) // 'o'
    }
  
  private lazy val lexerState40: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 40,
      yields = None,
    ) {
      case 101 => _root_.scala.Some(lexerState3) // 'e'
    }
  
  private lazy val lexerState41: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 41,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.escChar(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState42: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 42,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 32 => _root_.scala.Some(lexerState42) // ' '
    }
  
  private lazy val lexerState43: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 43,
      yields = None,
    ) {
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState34) // '0' - '9'
      case 62 => _root_.scala.Some(lexerState55) // '>'
    }
  
  private lazy val lexerState44: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 44,
      yields = None,
    ) {
      case 47 => _root_.scala.Some(lexerState21) // '/'
      case _ => _root_.scala.Some(lexerState6)
    }
  
  private lazy val lexerState45: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 45,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.char(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState46: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 46,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState47: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 47,
      yields = None,
    ) {
      case 100 => _root_.scala.Some(lexerState40) // 'd'
    }
  
  private lazy val lexerState48: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 48,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState49: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 49,
      yields = None,
    ) {
      case 47 => _root_.scala.Some(lexerState8) // '/'
      case _ => _root_.scala.Some(lexerState7)
    }
  
  private lazy val lexerState50: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 50,
      yields = None,
    ) {
      case 10 => _root_.scala.Some(lexerState25) // '\n'
      case _ => _root_.scala.Some(lexerState50)
    }
  
  private lazy val lexerState51: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 51,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState52: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 52,
      yields = None,
    ) {
      case 45 => _root_.scala.Some(lexerState55) // '-'
    }
  
  private lazy val lexerState53: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 53,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.chars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 92 => _root_.scala.None // '\\'
      case 34 => _root_.scala.None // '\"'
      case _ => _root_.scala.Some(lexerState53)
    }
  
  private lazy val lexerState54: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 54,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.term(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case c if c >= 97 && c <= 122 => _root_.scala.Some(lexerState54) // 'a' - 'z'
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState54) // 'A' - 'Z'
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState54) // '0' - '9'
      case 95 => _root_.scala.Some(lexerState54) // '_'
    }
  
  private lazy val lexerState55: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 55,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState56: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 56,
      yields = None,
    ) {
      case 116 => _root_.scala.Some(lexerState4) // 't'
    }
  
  private lazy val lexerState57: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 57,
      on = _ => _root_.scala.Some(lexerState1),
      yields = None,
    )
  
  private lazy val lexerState58: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 58,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState59: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 59,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.char(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 115 => _root_.scala.Some(lexerState56) // 's'
      case 109 => _root_.scala.Some(lexerState39) // 'm'
    }
  
  private lazy val lexerState60: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 60,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState61: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 61,
      yields = None,
    ) {
      case 42 => _root_.scala.Some(lexerState7) // '*'
      case 47 => _root_.scala.Some(lexerState5) // '/'
    }
  
  private lazy val lexerState62: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 62,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.escChars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState63: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 63,
      yields = None,
    ) {
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState11) // 'A' - 'Z'
      case c if c >= 97 && c <= 122 => _root_.scala.Some(lexerState54) // 'a' - 'z'
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState34) // '0' - '9'
      case 47 => _root_.scala.Some(lexerState61) // '/'
      case 60 => _root_.scala.Some(lexerState52) // '<'
      case 45 => _root_.scala.Some(lexerState43) // '-'
      case 34 => _root_.scala.Some(lexerState32) // '\"'
      case 93 => _root_.scala.Some(lexerState55) // ']'
      case 91 => _root_.scala.Some(lexerState55) // '['
      case 64 => _root_.scala.Some(lexerState55) // '@'
      case 44 => _root_.scala.Some(lexerState55) // ','
      case 10 => _root_.scala.Some(lexerState2) // '\n'
      case 62 => _root_.scala.Some(lexerState26) // '>'
      case 32 => _root_.scala.Some(lexerState24) // ' '
      case 9 => _root_.scala.Some(lexerState24) // '\t'
    }
  
  private lazy val lexerState64: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 64,
      yields = None,
    ) {
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState66) // '0' - '9'
    }
  
  private lazy val lexerState65: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 65,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState66: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 66,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Lexer.Terminal.int(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState66) // '0' - '9'
    }
  
  private lazy val lexerState67: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Lexer.Terminal](
      id = 67,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Lexer.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  override val lexer: _root_.slyce.parse.Lexer[_root_.slyce.generate.parsers.Lexer.Terminal] =
    _root_.slyce.parse.Lexer[_root_.slyce.generate.parsers.Lexer.Terminal](lexerState0)
  
  // =====| Grammar |=====
  
  lazy val grammarState0: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 0,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@start:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState128)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer => grammarState165
      },
    )
  
  lazy val grammarState1: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 1,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState153)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail => grammarState35
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode => grammarState137
      },
    )
  
  lazy val grammarState2: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 2,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState111)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState161)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState157
      },
    )
  
  lazy val grammarState3: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 3,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState4: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 4,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState5: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 5,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState65)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState6: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 6,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState7: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 7,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState45)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail => grammarState56
      },
    )
  
  lazy val grammarState8: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 8,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState113)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState9: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 9,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState99)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState10: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 10,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@start:`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState11: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 11,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState12: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 12,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState13: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 13,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState14: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 14,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState81)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState124)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail => grammarState21
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char => grammarState14
      },
    )
  
  lazy val grammarState15: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 15,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState16: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 16,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState17: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 17,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState18: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 18,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState74)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState20)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState29)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState39)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState15)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState92
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState130
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState40
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState71
      },
    )
  
  lazy val grammarState19: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 19,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState139)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState106)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState112)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState163)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState61)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState101)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState69)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState140)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState89)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState19
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState78
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState11
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant => grammarState50
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState126
      },
    )
  
  lazy val grammarState20: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 20,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState21: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 21,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState22: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 22,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState74)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState20)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState122)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState82)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState15)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner => grammarState129
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState44
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState71
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState130
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState104
      },
    )
  
  lazy val grammarState23: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 23,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState88)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState90
      },
    )
  
  lazy val grammarState24: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 24,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState111)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState161)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState157
      },
    )
  
  lazy val grammarState25: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 25,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState119)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState109
      },
    )
  
  lazy val grammarState26: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 26,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState27: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 27,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState144)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState54)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState38
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail => grammarState13
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState70
      },
    )
  
  lazy val grammarState28: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 28,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState29: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 29,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState74)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState20)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState22)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState164)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState15)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner => grammarState168
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState37
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState71
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState130
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState135
      },
    )
  
  lazy val grammarState30: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 30,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState150)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState87)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState31: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 31,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState45)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail => grammarState143
      },
    )
  
  lazy val grammarState32: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 32,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`^`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`^`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`^`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState33: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 33,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState30)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState97)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState34: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 34,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState2)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState35: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 35,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState36: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 36,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._6(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState37: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 37,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState74)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState20)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState22)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState164)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState58)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState117)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState138)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState15)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState170)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState37
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState71
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState130
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant => grammarState95
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState16
      },
    )
  
  lazy val grammarState38: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 38,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState144)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState54)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState38
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail => grammarState147
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState70
      },
    )
  
  lazy val grammarState39: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 39,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState32)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^` => grammarState64
      },
    )
  
  lazy val grammarState40: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 40,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState18)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState109
      },
    )
  
  lazy val grammarState41: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 41,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState52)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState109
      },
    )
  
  lazy val grammarState42: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 42,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState73)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState131)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState43: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 43,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState17)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState48)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.term) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState86)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw => grammarState12
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType => grammarState110
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head => grammarState47
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield => grammarState7
      },
    )
  
  lazy val grammarState44: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 44,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState74)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState20)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState122)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState82)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState136)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState117)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState138)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState15)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState170)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState44
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState71
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState130
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant => grammarState95
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState16
      },
    )
  
  lazy val grammarState45: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 45,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.term) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState86)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState17)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState48)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Raw => grammarState12
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType => grammarState110
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield => grammarState31
      },
    )
  
  lazy val grammarState46: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 46,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState139)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState112)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState163)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState140)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState106)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._2, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner => grammarState152
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail => grammarState146
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState19
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState78
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState11
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line => grammarState46
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState23
      },
    )
  
  lazy val grammarState47: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 47,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState103)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState107)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState167)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._1, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode => grammarState121
      },
    )
  
  lazy val grammarState48: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 48,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState81)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState124)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char => grammarState100
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head => grammarState118
      },
    )
  
  lazy val grammarState49: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 49,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState159)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState50: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 50,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState51: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 51,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState154)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState52: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 52,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState74)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState20)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState122)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState82)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState15)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState44
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState130
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState41
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState71
      },
    )
  
  lazy val grammarState53: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 53,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState18)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState116
      },
    )
  
  lazy val grammarState54: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 54,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState55: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 55,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState8)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState131)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState56: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 56,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState57: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 57,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState96)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState131)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState58: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 58,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState102)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState60)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState59: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 59,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState144)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState54)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState27
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head => grammarState108
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState70
      },
    )
  
  lazy val grammarState60: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 60,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState77)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState61: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 61,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState93)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState62)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState62: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 62,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState98)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState63: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 63,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState158)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState64: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 64,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState144)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState54)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState149
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head => grammarState68
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState134
      },
    )
  
  lazy val grammarState65: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 65,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState6)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState66: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 66,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`|`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState67: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 67,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState6)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState68: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 68,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState159)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState69: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 69,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState70: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 70,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState155)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState71: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 71,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState72: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 72,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState73: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 73,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState113)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState74: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 74,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState75: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 75,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState88)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState66
      },
    )
  
  lazy val grammarState76: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 76,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState144)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState54)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState76
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail => grammarState147
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState134
      },
    )
  
  lazy val grammarState77: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 77,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState6)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState78: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 78,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState79: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 79,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`->`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._2(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState80: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 80,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState114)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState81: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 81,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState82: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 82,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState32)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^` => grammarState115
      },
    )
  
  lazy val grammarState83: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 83,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState67)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState84: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 84,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._3(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState85: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 85,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState86: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 86,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.term), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.YieldType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState87: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 87,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._2(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState88: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 88,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState139)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState106)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState112)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState163)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState140)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState19
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState11
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState75
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState78
      },
    )
  
  lazy val grammarState89: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 89,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState90: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 90,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState91: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 91,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState144)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState54)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState160
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head => grammarState51
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState34
      },
    )
  
  lazy val grammarState92: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 92,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState74)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState20)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState29)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState39)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState162)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState117)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState138)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState15)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState170)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState92
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState71
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState130
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant => grammarState95
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState16
      },
    )
  
  lazy val grammarState93: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 93,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState145)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState148)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState94: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 94,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState95: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 95,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._3(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState96: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 96,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState113)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState97: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 97,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState80)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState98: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 98,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState36)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState99: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 99,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState100: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 100,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState81)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState124)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail => grammarState169
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char => grammarState14
      },
    )
  
  lazy val grammarState101: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 101,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState102: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 102,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState94)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState42)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState103: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 103,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.mode) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState84)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState104: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 104,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState52)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState116
      },
    )
  
  lazy val grammarState105: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 105,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState144)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState54)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState105
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail => grammarState147
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState34
      },
    )
  
  lazy val grammarState106: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 106,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState107: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 107,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.mode) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState79)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState108: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 108,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState159)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState109: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 109,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`|`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState110: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 110,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.mode) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState33)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState33)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`@`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.term) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: (_: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._1, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString => grammarState3
      },
    )
  
  lazy val grammarState111: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 111,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState112: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 112,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState74)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState20)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState29)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState39)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState15)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner => grammarState125
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState92
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState71
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState130
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState53
      },
    )
  
  lazy val grammarState113: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 113,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._7(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState114: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 114,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._4(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState115: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 115,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState144)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState54)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState27
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head => grammarState49
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState70
      },
    )
  
  lazy val grammarState116: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 116,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState117: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 117,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState118: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 118,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState4)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState119: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 119,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState74)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState20)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState22)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState164)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState15)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState37
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState130
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState25
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState71
      },
    )
  
  lazy val grammarState120: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 120,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._3(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState121: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 121,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Line(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState122: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 122,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState74)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState20)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState122)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState82)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState15)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner => grammarState142
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState44
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState71
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState130
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState104
      },
    )
  
  lazy val grammarState123: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 123,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Group(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState124: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 124,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Char._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState125: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 125,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState72)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState126: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 126,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState127: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 127,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState94)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState55)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState128: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 128,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.mode) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState151)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState129: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 129,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState123)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState130: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 130,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState131: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 131,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._5(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState132: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 132,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState139)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState112)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState163)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState140)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState106)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._2, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner => grammarState152
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail => grammarState28
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState19
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState78
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState11
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line => grammarState46
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState23
      },
    )
  
  lazy val grammarState133: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 133,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState134: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 134,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState24)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState135: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 135,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState119)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInnerTail => grammarState116
      },
    )
  
  lazy val grammarState136: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 136,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState127)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState83)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState137: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 137,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState153)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Tail => grammarState133
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode => grammarState137
      },
    )
  
  lazy val grammarState138: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 138,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState139: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 139,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState140: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 140,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState141: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 141,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState142: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 142,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState123)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState143: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 143,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.Yield), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState144: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 144,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState145: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 145,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`{`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._4(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState146: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 146,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._1(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Tail._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState147: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 147,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState148: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 148,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState9)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState26)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState149: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 149,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState144)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState54)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState76
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail => grammarState13
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState134
      },
    )
  
  lazy val grammarState150: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 150,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState63)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState120)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState151: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 151,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState153)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList0Head => grammarState10
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Mode => grammarState1
      },
    )
  
  lazy val grammarState152: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 152,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState43)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState153: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 153,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.mode) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState156)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState154: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 154,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState155: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 155,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState111)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState161)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState157
      },
    )
  
  lazy val grammarState156: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 156,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState139)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState106)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState112)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState163)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState140)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.GroupInner => grammarState152
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList1Head => grammarState85
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Regex => grammarState19
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass => grammarState78
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Group => grammarState11
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Line => grammarState132
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.Sequence => grammarState23
      },
    )
  
  lazy val grammarState157: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 157,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`-`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`-`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`-`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.`-`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState158: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 158,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`>>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`->`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Lexer.Terminal.`,`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Lexer.Terminal.int), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.SubString._5(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState159: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 159,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.slyce.generate.parsers.Lexer.Terminal.`]`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`[`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CharClass._1(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState160: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 160,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState144)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState54)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState141)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChars => grammarState105
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList4Tail => grammarState13
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar => grammarState34
      },
    )
  
  lazy val grammarState161: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 161,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`]`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.CCChar._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState162: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 162,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.int) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState166)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState5)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState163: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 163,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState32)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^` => grammarState91
      },
    )
  
  lazy val grammarState164: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 164,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState32)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Lexer.NonTerminal.`Optional_^` => grammarState59
      },
    )
  
  lazy val grammarState165: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 165,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Accept[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(root: _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer), _) :: _root_.scala.Nil => root
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState166: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 166,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState94)
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`,`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState57)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState167: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 167,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`@mode:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`<-`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.ToMode._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState168: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 168,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState123)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState169: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 169,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Lexer.NonTerminal.Char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.AnonList3Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState170: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](
      id = 170,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`[`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`{`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.char) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Lexer.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Lexer.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Lexer.NonTerminal.Quant._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  override val grammar: _root_.slyce.parse.Grammar[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer] =
    _root_.slyce.parse.Grammar[_root_.slyce.generate.parsers.Lexer.Terminal, _root_.slyce.generate.parsers.Lexer.NonTerminal, _root_.slyce.generate.parsers.Lexer.NonTerminal.Lexer](grammarState0)
  
}

// format: on
