// !!! DO NOT MODIFY !!!
// File was automatically generated by slyce

package slyce.generate.parsers

// format: off

object Grammar {
  
  // =====| Terminals |=====
  
  sealed abstract class Terminal(final val tokName: _root_.scala.Predef.String) extends _root_.slyce.core.Token
  object Terminal {
    final case class chars(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal("chars")
                                                                                                     with _root_.slyce.generate.parsers.Grammar.NonTerminal.Char.Lift
    final case class escChar(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal("escChar")
                                                                                                       with _root_.slyce.generate.parsers.Grammar.NonTerminal.Char.Lift
    final case class mode(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal("mode")
    final case class nonTerminal(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal("nonTerminal")
                                                                                                           with _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement.Lift
    final case class terminal(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal("terminal")
                                                                                                        with _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement.Lift
    
    final case class `\"`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal(""""\""""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `(`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal(""""("""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `)`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal("""")"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `*`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal(""""*"""")
                                                                 with _root_.slyce.core.Token.Const
                                                                 with _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType.Lift
    final case class `+`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal(""""+"""")
                                                                 with _root_.slyce.core.Token.Const
                                                                 with _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType.Lift
    final case class `.`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal(""""."""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `:`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal("""":"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `;`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal("""";"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `<`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal(""""<"""")
                                                                 with _root_.slyce.core.Token.Const
                                                                 with _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType.Lift
    final case class `>`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal("""">"""")
                                                                 with _root_.slyce.core.Token.Const
                                                                 with _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType.Lift
    final case class `\\?`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal(""""?"""")
                                                                   with _root_.slyce.core.Token.Const
    final case class `@start:`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal(""""@start:"""")
                                                                       with _root_.slyce.core.Token.Const
    final case class `^`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal(""""^"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `|`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal(""""|"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `~`(span: _root_.slyce.core.Span.Highlight) extends _root_.slyce.generate.parsers.Grammar.Terminal(""""~"""")
                                                                 with _root_.slyce.core.Token.Const
    
    val __findRawTerminal: _root_.slyce.core.Span.Highlight => PartialFunction[_root_.scala.Predef.String, _root_.slyce.generate.parsers.Grammar.Terminal] =
      span => {
        case "\"" => Terminal.`\"`(span)
        case "(" => Terminal.`(`(span)
        case ")" => Terminal.`)`(span)
        case "*" => Terminal.`*`(span)
        case "+" => Terminal.`+`(span)
        case "." => Terminal.`.`(span)
        case ":" => Terminal.`:`(span)
        case ";" => Terminal.`;`(span)
        case "<" => Terminal.`<`(span)
        case ">" => Terminal.`>`(span)
        case "?" => Terminal.`\\?`(span)
        case "@start:" => Terminal.`@start:`(span)
        case "^" => Terminal.`^`(span)
        case "|" => Terminal.`|`(span)
        case "~" => Terminal.`~`(span)
      }
  }
  
  // =====| Non-Terminals |=====
  
  sealed abstract class NonTerminal(final val ntName: _root_.scala.Predef.String) extends _root_.slyce.core.NonTerminal
  object NonTerminal {
    
    sealed abstract class AnonList extends _root_.slyce.generate.parsers.Grammar.NonTerminal("AnonList")
                                   with _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement.Lift
    object AnonList {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element,
        _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList
        with _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement.Lift
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`,
        _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList,
        _3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`,
        _4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList
        with _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement.Lift
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`,
        _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList,
        _3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`,
        _4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList,
        _5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`,
        _6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList
        with _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement.Lift
      
    }
    
    final case class AnonList0Head(
      _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NT,
      _2: _root_.slyce.generate.parsers.Grammar.Terminal.`;`,
      _3: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Tail,
    ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal("AnonList0Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Tail._1(lift, _, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Head.Lift](this._1, loop(this._3, Nil))
      }
      
    }
    object AnonList0Head {
      
      type Lift = _root_.slyce.generate.parsers.Grammar.NonTerminal.NT
      
    }
    
    sealed abstract class AnonList0Tail extends _root_.slyce.generate.parsers.Grammar.NonTerminal("AnonList0Tail")
    object AnonList0Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NT,
        _2: _root_.slyce.generate.parsers.Grammar.Terminal.`;`,
        _3: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Tail,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Tail
      
    }
    
    final case class AnonList1Head(
      _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList,
      _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Tail,
    ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal("AnonList1Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Tail._1(_, lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList1Head {
      
      type Lift = _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList
      
    }
    
    sealed abstract class AnonList1Tail extends _root_.slyce.generate.parsers.Grammar.NonTerminal("AnonList1Tail")
    object AnonList1Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.Terminal.`|`,
        _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList,
        _3: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Tail,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Tail
      
    }
    
    final case class AnonList2Head(
      _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList,
      _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Tail,
    ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal("AnonList2Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Tail._1(_, lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList2Head {
      
      type Lift = _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList
      
    }
    
    sealed abstract class AnonList2Tail extends _root_.slyce.generate.parsers.Grammar.NonTerminal("AnonList2Tail")
    object AnonList2Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.Terminal.`|`,
        _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList,
        _3: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Tail,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Tail
      
    }
    
    final case class AnonList3Head(
      _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocPair,
      _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail,
    ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal("AnonList3Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail._1(_, lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList3Head {
      
      type Lift = _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocPair
      
    }
    
    sealed abstract class AnonList3Tail extends _root_.slyce.generate.parsers.Grammar.NonTerminal("AnonList3Tail")
    object AnonList3Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.Terminal.`|`,
        _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocPair,
        _3: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail
      
    }
    
    final case class AnonList4Head(
      _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char,
      _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Tail,
    ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal("AnonList4Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Tail, stack: _root_.scala.List[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Tail._1(lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList4Head {
      
      type Lift = _root_.slyce.generate.parsers.Grammar.NonTerminal.Char
      
    }
    
    sealed abstract class AnonList4Tail extends _root_.slyce.generate.parsers.Grammar.NonTerminal("AnonList4Tail")
    object AnonList4Tail {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char,
        _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Tail,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Tail
      
      case object _2 extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Tail
      
    }
    
    final case class AssocNT(
      _1: _root_.slyce.generate.parsers.Grammar.Terminal.`~`,
      _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Head,
      _3: _root_.slyce.generate.parsers.Grammar.NonTerminal.StandardNT,
    ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal("AssocNT")
      with _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody.Lift
    
    final case class AssocPair(
      _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType,
      _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element,
    ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal("AssocPair")
    
    sealed abstract class AssocType extends _root_.slyce.generate.parsers.Grammar.NonTerminal("AssocType") {
      
      final def lift: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType.Lift =
        this match {
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType._1(lift) => lift
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType._2(lift) => lift
        }
      
    }
    object AssocType {
      
      sealed trait Lift extends _root_.slyce.core.Token
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.Terminal.`<`,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Grammar.Terminal.`>`,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType
      
    }
    
    final case class BasicNT(
      _1: _root_.slyce.generate.parsers.Grammar.Terminal.`:`,
      _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Head,
    ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal("BasicNT")
    
    sealed abstract class Char extends _root_.slyce.generate.parsers.Grammar.NonTerminal("Char") {
      
      final def lift: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char.Lift =
        this match {
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.Char._1(lift) => lift
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.Char._2(lift) => lift
        }
      
    }
    object Char {
      
      sealed trait Lift extends _root_.slyce.core.Token
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.Terminal.chars,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.Char
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Grammar.Terminal.escChar,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.Char
      
    }
    
    final case class Element(
      _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement,
      _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`,
    ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal("Element")
    
    sealed abstract class ElementList extends _root_.slyce.generate.parsers.Grammar.NonTerminal("ElementList") {
      
      final def toList: _root_.scala.List[_root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList, stack: _root_.scala.List[_root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList.Lift]): _root_.scala.List[_root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList.Lift] =
          queue match {
            case _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._1(lift, next) => loop(next, lift :: stack)
            case _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2 => stack.reverse
          }
        
        loop(this, Nil)
      }
      
    }
    object ElementList {
      
      type Lift = _root_.slyce.generate.parsers.Grammar.NonTerminal.Element
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element,
        _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList
      
      case object _2 extends _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList
      
    }
    
    final case class Grammar(
      _1: _root_.slyce.generate.parsers.Grammar.Terminal.`@start:`,
      _2: _root_.slyce.generate.parsers.Grammar.Terminal.mode,
      _3: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Head,
    ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal("Grammar")
    
    sealed abstract class LiftElementList extends _root_.slyce.generate.parsers.Grammar.NonTerminal("LiftElementList")
    object LiftElementList {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList,
        _2: _root_.slyce.generate.parsers.Grammar.Terminal.`^`,
        _3: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element,
        _4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList
      
    }
    
    final case class LiftNT(
      _1: _root_.slyce.generate.parsers.Grammar.Terminal.`^`,
      _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Head,
    ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal("LiftNT")
    
    sealed abstract class ListNT extends _root_.slyce.generate.parsers.Grammar.NonTerminal("ListNT")
                                 with _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody.Lift
    object ListNT {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType,
        _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.ListNT
        with _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody.Lift
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType,
        _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList,
        _3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`,
        _4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.ListNT
        with _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody.Lift
      
    }
    
    sealed abstract class ListType extends _root_.slyce.generate.parsers.Grammar.NonTerminal("ListType") {
      
      final def lift: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType.Lift =
        this match {
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(lift) => lift
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(lift) => lift
        }
      
    }
    object ListType {
      
      sealed trait Lift extends _root_.slyce.core.Token
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType
      
    }
    
    final case class NT(
      _1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal,
      _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody,
    ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal("NT")
    
    sealed abstract class NTBody extends _root_.slyce.generate.parsers.Grammar.NonTerminal("NTBody") {
      
      final def lift: _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody.Lift =
        this match {
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody._1(lift) => lift
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody._2(lift) => lift
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody._3(lift) => lift
        }
      
    }
    object NTBody {
      
      sealed trait Lift
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.StandardNT,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListNT,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocNT,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody
      
    }
    
    sealed abstract class NonOptElement extends _root_.slyce.generate.parsers.Grammar.NonTerminal("NonOptElement") {
      
      final def lift: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement.Lift =
        this match {
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(lift) => lift
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(lift) => lift
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(lift) => lift
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(lift) => lift
        }
      
    }
    object NonOptElement {
      
      sealed trait Lift
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement
      
      final case class _3(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement
      
      final case class _4(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement
      
    }
    
    final case class Raw(
      _1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`,
      _2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head,
      _3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`,
    ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal("Raw")
      with _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement.Lift
    
    sealed abstract class StandardNT extends _root_.slyce.generate.parsers.Grammar.NonTerminal("StandardNT")
                                     with _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody.Lift
    object StandardNT {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.BasicNT,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.StandardNT
        with _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody.Lift
      
      final case class _2(
        _1: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftNT,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.StandardNT
        with _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody.Lift
      
    }
    
    sealed abstract class `Optional_?` extends _root_.slyce.generate.parsers.Grammar.NonTerminal("`Optional_?`") {
      
      final def toOption: _root_.scala.Option[_root_.slyce.generate.parsers.Grammar.Terminal.`\\?`] =
        this match {
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(lift) => _root_.scala.Some(lift)
          case _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2 => _root_.scala.None
        }
      
    }
    object `Optional_?` {
      
      final case class _1(
        _1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`,
      ) extends _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`
      
      case object _2 extends _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`
      
    }
    
  }
  
  // =====| Lexer |=====
  
  private lazy val lexerState0: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 0,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState5), // '\t'
        10 -> _root_.scala.Some(lexerState5), // '\n'
        32 -> _root_.scala.Some(lexerState5), // ' '
        34 -> _root_.scala.Some(lexerState6), // '\"'
        40 -> _root_.scala.Some(lexerState22), // '('
        41 -> _root_.scala.Some(lexerState22), // ')'
        42 -> _root_.scala.Some(lexerState3), // '*'
        43 -> _root_.scala.Some(lexerState3), // '+'
        46 -> _root_.scala.Some(lexerState22), // '.'
        47 -> _root_.scala.Some(lexerState25), // '/'
        58 -> _root_.scala.Some(lexerState3), // ':'
        59 -> _root_.scala.Some(lexerState22), // ';'
        60 -> _root_.scala.Some(lexerState3), // '<'
        62 -> _root_.scala.Some(lexerState3), // '>'
        63 -> _root_.scala.Some(lexerState22), // '?'
        64 -> _root_.scala.Some(lexerState15), // '@'
        65 -> _root_.scala.Some(lexerState13), // 'A'
        66 -> _root_.scala.Some(lexerState13), // 'B'
        67 -> _root_.scala.Some(lexerState13), // 'C'
        68 -> _root_.scala.Some(lexerState13), // 'D'
        69 -> _root_.scala.Some(lexerState13), // 'E'
        70 -> _root_.scala.Some(lexerState13), // 'F'
        71 -> _root_.scala.Some(lexerState13), // 'G'
        72 -> _root_.scala.Some(lexerState13), // 'H'
        73 -> _root_.scala.Some(lexerState13), // 'I'
        74 -> _root_.scala.Some(lexerState13), // 'J'
        75 -> _root_.scala.Some(lexerState13), // 'K'
        76 -> _root_.scala.Some(lexerState13), // 'L'
        77 -> _root_.scala.Some(lexerState13), // 'M'
        78 -> _root_.scala.Some(lexerState13), // 'N'
        79 -> _root_.scala.Some(lexerState13), // 'O'
        80 -> _root_.scala.Some(lexerState13), // 'P'
        81 -> _root_.scala.Some(lexerState13), // 'Q'
        82 -> _root_.scala.Some(lexerState13), // 'R'
        83 -> _root_.scala.Some(lexerState13), // 'S'
        84 -> _root_.scala.Some(lexerState13), // 'T'
        85 -> _root_.scala.Some(lexerState13), // 'U'
        86 -> _root_.scala.Some(lexerState13), // 'V'
        87 -> _root_.scala.Some(lexerState13), // 'W'
        88 -> _root_.scala.Some(lexerState13), // 'X'
        89 -> _root_.scala.Some(lexerState13), // 'Y'
        90 -> _root_.scala.Some(lexerState13), // 'Z'
        94 -> _root_.scala.Some(lexerState3), // '^'
        97 -> _root_.scala.Some(lexerState9), // 'a'
        98 -> _root_.scala.Some(lexerState9), // 'b'
        99 -> _root_.scala.Some(lexerState9), // 'c'
        100 -> _root_.scala.Some(lexerState9), // 'd'
        101 -> _root_.scala.Some(lexerState9), // 'e'
        102 -> _root_.scala.Some(lexerState9), // 'f'
        103 -> _root_.scala.Some(lexerState9), // 'g'
        104 -> _root_.scala.Some(lexerState9), // 'h'
        105 -> _root_.scala.Some(lexerState9), // 'i'
        106 -> _root_.scala.Some(lexerState9), // 'j'
        107 -> _root_.scala.Some(lexerState9), // 'k'
        108 -> _root_.scala.Some(lexerState9), // 'l'
        109 -> _root_.scala.Some(lexerState9), // 'm'
        110 -> _root_.scala.Some(lexerState9), // 'n'
        111 -> _root_.scala.Some(lexerState9), // 'o'
        112 -> _root_.scala.Some(lexerState9), // 'p'
        113 -> _root_.scala.Some(lexerState9), // 'q'
        114 -> _root_.scala.Some(lexerState9), // 'r'
        115 -> _root_.scala.Some(lexerState9), // 's'
        116 -> _root_.scala.Some(lexerState9), // 't'
        117 -> _root_.scala.Some(lexerState9), // 'u'
        118 -> _root_.scala.Some(lexerState9), // 'v'
        119 -> _root_.scala.Some(lexerState9), // 'w'
        120 -> _root_.scala.Some(lexerState9), // 'x'
        121 -> _root_.scala.Some(lexerState9), // 'y'
        122 -> _root_.scala.Some(lexerState9), // 'z'
        124 -> _root_.scala.Some(lexerState22), // '|'
        126 -> _root_.scala.Some(lexerState3), // '~'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState1: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 1,
      on = _root_.scala.collection.immutable.Map(
        10 -> _root_.scala.Some(lexerState4), // '\n'
      ),
      elseOn = _root_.scala.Some(lexerState1),
      yields = None,
    )
  
  private lazy val lexerState2: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 2,
      on = _root_.scala.collection.immutable.Map(
        58 -> _root_.scala.Some(lexerState14), // ':'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState3: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 3,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Grammar.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState4: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 4,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState5: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 5,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState5), // '\t'
        10 -> _root_.scala.Some(lexerState5), // '\n'
        32 -> _root_.scala.Some(lexerState5), // ' '
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState6: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 6,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Grammar.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState20)),
        ),
      ),
    )
  
  private lazy val lexerState7: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 7,
      on = _root_.scala.collection.immutable.Map(
        34 -> _root_.scala.Some(lexerState24), // '\"'
        92 -> _root_.scala.Some(lexerState24), // '\\'
        110 -> _root_.scala.Some(lexerState24), // 'n'
        116 -> _root_.scala.Some(lexerState24), // 't'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState8: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 8,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState9: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 9,
      on = _root_.scala.collection.immutable.Map(
        48 -> _root_.scala.Some(lexerState9), // '0'
        49 -> _root_.scala.Some(lexerState9), // '1'
        50 -> _root_.scala.Some(lexerState9), // '2'
        51 -> _root_.scala.Some(lexerState9), // '3'
        52 -> _root_.scala.Some(lexerState9), // '4'
        53 -> _root_.scala.Some(lexerState9), // '5'
        54 -> _root_.scala.Some(lexerState9), // '6'
        55 -> _root_.scala.Some(lexerState9), // '7'
        56 -> _root_.scala.Some(lexerState9), // '8'
        57 -> _root_.scala.Some(lexerState9), // '9'
        65 -> _root_.scala.Some(lexerState9), // 'A'
        66 -> _root_.scala.Some(lexerState9), // 'B'
        67 -> _root_.scala.Some(lexerState9), // 'C'
        68 -> _root_.scala.Some(lexerState9), // 'D'
        69 -> _root_.scala.Some(lexerState9), // 'E'
        70 -> _root_.scala.Some(lexerState9), // 'F'
        71 -> _root_.scala.Some(lexerState9), // 'G'
        72 -> _root_.scala.Some(lexerState9), // 'H'
        73 -> _root_.scala.Some(lexerState9), // 'I'
        74 -> _root_.scala.Some(lexerState9), // 'J'
        75 -> _root_.scala.Some(lexerState9), // 'K'
        76 -> _root_.scala.Some(lexerState9), // 'L'
        77 -> _root_.scala.Some(lexerState9), // 'M'
        78 -> _root_.scala.Some(lexerState9), // 'N'
        79 -> _root_.scala.Some(lexerState9), // 'O'
        80 -> _root_.scala.Some(lexerState9), // 'P'
        81 -> _root_.scala.Some(lexerState9), // 'Q'
        82 -> _root_.scala.Some(lexerState9), // 'R'
        83 -> _root_.scala.Some(lexerState9), // 'S'
        84 -> _root_.scala.Some(lexerState9), // 'T'
        85 -> _root_.scala.Some(lexerState9), // 'U'
        86 -> _root_.scala.Some(lexerState9), // 'V'
        87 -> _root_.scala.Some(lexerState9), // 'W'
        88 -> _root_.scala.Some(lexerState9), // 'X'
        89 -> _root_.scala.Some(lexerState9), // 'Y'
        90 -> _root_.scala.Some(lexerState9), // 'Z'
        95 -> _root_.scala.Some(lexerState9), // '_'
        97 -> _root_.scala.Some(lexerState9), // 'a'
        98 -> _root_.scala.Some(lexerState9), // 'b'
        99 -> _root_.scala.Some(lexerState9), // 'c'
        100 -> _root_.scala.Some(lexerState9), // 'd'
        101 -> _root_.scala.Some(lexerState9), // 'e'
        102 -> _root_.scala.Some(lexerState9), // 'f'
        103 -> _root_.scala.Some(lexerState9), // 'g'
        104 -> _root_.scala.Some(lexerState9), // 'h'
        105 -> _root_.scala.Some(lexerState9), // 'i'
        106 -> _root_.scala.Some(lexerState9), // 'j'
        107 -> _root_.scala.Some(lexerState9), // 'k'
        108 -> _root_.scala.Some(lexerState9), // 'l'
        109 -> _root_.scala.Some(lexerState9), // 'm'
        110 -> _root_.scala.Some(lexerState9), // 'n'
        111 -> _root_.scala.Some(lexerState9), // 'o'
        112 -> _root_.scala.Some(lexerState9), // 'p'
        113 -> _root_.scala.Some(lexerState9), // 'q'
        114 -> _root_.scala.Some(lexerState9), // 'r'
        115 -> _root_.scala.Some(lexerState9), // 's'
        116 -> _root_.scala.Some(lexerState9), // 't'
        117 -> _root_.scala.Some(lexerState9), // 'u'
        118 -> _root_.scala.Some(lexerState9), // 'v'
        119 -> _root_.scala.Some(lexerState9), // 'w'
        120 -> _root_.scala.Some(lexerState9), // 'x'
        121 -> _root_.scala.Some(lexerState9), // 'y'
        122 -> _root_.scala.Some(lexerState9), // 'z'
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Grammar.Terminal.terminal(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState10: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 10,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Grammar.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState11: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 11,
      on = _root_.scala.collection.immutable.Map(
        116 -> _root_.scala.Some(lexerState23), // 't'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState12: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 12,
      on = _root_.scala.collection.immutable.Map(
        114 -> _root_.scala.Some(lexerState21), // 'r'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState13: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 13,
      on = _root_.scala.collection.immutable.Map(
        48 -> _root_.scala.Some(lexerState13), // '0'
        49 -> _root_.scala.Some(lexerState13), // '1'
        50 -> _root_.scala.Some(lexerState13), // '2'
        51 -> _root_.scala.Some(lexerState13), // '3'
        52 -> _root_.scala.Some(lexerState13), // '4'
        53 -> _root_.scala.Some(lexerState13), // '5'
        54 -> _root_.scala.Some(lexerState13), // '6'
        55 -> _root_.scala.Some(lexerState13), // '7'
        56 -> _root_.scala.Some(lexerState13), // '8'
        57 -> _root_.scala.Some(lexerState13), // '9'
        65 -> _root_.scala.Some(lexerState13), // 'A'
        66 -> _root_.scala.Some(lexerState13), // 'B'
        67 -> _root_.scala.Some(lexerState13), // 'C'
        68 -> _root_.scala.Some(lexerState13), // 'D'
        69 -> _root_.scala.Some(lexerState13), // 'E'
        70 -> _root_.scala.Some(lexerState13), // 'F'
        71 -> _root_.scala.Some(lexerState13), // 'G'
        72 -> _root_.scala.Some(lexerState13), // 'H'
        73 -> _root_.scala.Some(lexerState13), // 'I'
        74 -> _root_.scala.Some(lexerState13), // 'J'
        75 -> _root_.scala.Some(lexerState13), // 'K'
        76 -> _root_.scala.Some(lexerState13), // 'L'
        77 -> _root_.scala.Some(lexerState13), // 'M'
        78 -> _root_.scala.Some(lexerState13), // 'N'
        79 -> _root_.scala.Some(lexerState13), // 'O'
        80 -> _root_.scala.Some(lexerState13), // 'P'
        81 -> _root_.scala.Some(lexerState13), // 'Q'
        82 -> _root_.scala.Some(lexerState13), // 'R'
        83 -> _root_.scala.Some(lexerState13), // 'S'
        84 -> _root_.scala.Some(lexerState13), // 'T'
        85 -> _root_.scala.Some(lexerState13), // 'U'
        86 -> _root_.scala.Some(lexerState13), // 'V'
        87 -> _root_.scala.Some(lexerState13), // 'W'
        88 -> _root_.scala.Some(lexerState13), // 'X'
        89 -> _root_.scala.Some(lexerState13), // 'Y'
        90 -> _root_.scala.Some(lexerState13), // 'Z'
        95 -> _root_.scala.Some(lexerState13), // '_'
        97 -> _root_.scala.Some(lexerState13), // 'a'
        98 -> _root_.scala.Some(lexerState13), // 'b'
        99 -> _root_.scala.Some(lexerState13), // 'c'
        100 -> _root_.scala.Some(lexerState13), // 'd'
        101 -> _root_.scala.Some(lexerState13), // 'e'
        102 -> _root_.scala.Some(lexerState13), // 'f'
        103 -> _root_.scala.Some(lexerState13), // 'g'
        104 -> _root_.scala.Some(lexerState13), // 'h'
        105 -> _root_.scala.Some(lexerState13), // 'i'
        106 -> _root_.scala.Some(lexerState13), // 'j'
        107 -> _root_.scala.Some(lexerState13), // 'k'
        108 -> _root_.scala.Some(lexerState13), // 'l'
        109 -> _root_.scala.Some(lexerState13), // 'm'
        110 -> _root_.scala.Some(lexerState13), // 'n'
        111 -> _root_.scala.Some(lexerState13), // 'o'
        112 -> _root_.scala.Some(lexerState13), // 'p'
        113 -> _root_.scala.Some(lexerState13), // 'q'
        114 -> _root_.scala.Some(lexerState13), // 'r'
        115 -> _root_.scala.Some(lexerState13), // 's'
        116 -> _root_.scala.Some(lexerState13), // 't'
        117 -> _root_.scala.Some(lexerState13), // 'u'
        118 -> _root_.scala.Some(lexerState13), // 'v'
        119 -> _root_.scala.Some(lexerState13), // 'w'
        120 -> _root_.scala.Some(lexerState13), // 'x'
        121 -> _root_.scala.Some(lexerState13), // 'y'
        122 -> _root_.scala.Some(lexerState13), // 'z'
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState14: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 14,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Grammar.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState17)),
        ),
      ),
    )
  
  private lazy val lexerState15: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 15,
      on = _root_.scala.collection.immutable.Map(
        115 -> _root_.scala.Some(lexerState11), // 's'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState16: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 16,
      on = _root_.scala.collection.immutable.Map(
        48 -> _root_.scala.Some(lexerState16), // '0'
        49 -> _root_.scala.Some(lexerState16), // '1'
        50 -> _root_.scala.Some(lexerState16), // '2'
        51 -> _root_.scala.Some(lexerState16), // '3'
        52 -> _root_.scala.Some(lexerState16), // '4'
        53 -> _root_.scala.Some(lexerState16), // '5'
        54 -> _root_.scala.Some(lexerState16), // '6'
        55 -> _root_.scala.Some(lexerState16), // '7'
        56 -> _root_.scala.Some(lexerState16), // '8'
        57 -> _root_.scala.Some(lexerState16), // '9'
        65 -> _root_.scala.Some(lexerState16), // 'A'
        66 -> _root_.scala.Some(lexerState16), // 'B'
        67 -> _root_.scala.Some(lexerState16), // 'C'
        68 -> _root_.scala.Some(lexerState16), // 'D'
        69 -> _root_.scala.Some(lexerState16), // 'E'
        70 -> _root_.scala.Some(lexerState16), // 'F'
        71 -> _root_.scala.Some(lexerState16), // 'G'
        72 -> _root_.scala.Some(lexerState16), // 'H'
        73 -> _root_.scala.Some(lexerState16), // 'I'
        74 -> _root_.scala.Some(lexerState16), // 'J'
        75 -> _root_.scala.Some(lexerState16), // 'K'
        76 -> _root_.scala.Some(lexerState16), // 'L'
        77 -> _root_.scala.Some(lexerState16), // 'M'
        78 -> _root_.scala.Some(lexerState16), // 'N'
        79 -> _root_.scala.Some(lexerState16), // 'O'
        80 -> _root_.scala.Some(lexerState16), // 'P'
        81 -> _root_.scala.Some(lexerState16), // 'Q'
        82 -> _root_.scala.Some(lexerState16), // 'R'
        83 -> _root_.scala.Some(lexerState16), // 'S'
        84 -> _root_.scala.Some(lexerState16), // 'T'
        85 -> _root_.scala.Some(lexerState16), // 'U'
        86 -> _root_.scala.Some(lexerState16), // 'V'
        87 -> _root_.scala.Some(lexerState16), // 'W'
        88 -> _root_.scala.Some(lexerState16), // 'X'
        89 -> _root_.scala.Some(lexerState16), // 'Y'
        90 -> _root_.scala.Some(lexerState16), // 'Z'
        95 -> _root_.scala.Some(lexerState16), // '_'
        97 -> _root_.scala.Some(lexerState16), // 'a'
        98 -> _root_.scala.Some(lexerState16), // 'b'
        99 -> _root_.scala.Some(lexerState16), // 'c'
        100 -> _root_.scala.Some(lexerState16), // 'd'
        101 -> _root_.scala.Some(lexerState16), // 'e'
        102 -> _root_.scala.Some(lexerState16), // 'f'
        103 -> _root_.scala.Some(lexerState16), // 'g'
        104 -> _root_.scala.Some(lexerState16), // 'h'
        105 -> _root_.scala.Some(lexerState16), // 'i'
        106 -> _root_.scala.Some(lexerState16), // 'j'
        107 -> _root_.scala.Some(lexerState16), // 'k'
        108 -> _root_.scala.Some(lexerState16), // 'l'
        109 -> _root_.scala.Some(lexerState16), // 'm'
        110 -> _root_.scala.Some(lexerState16), // 'n'
        111 -> _root_.scala.Some(lexerState16), // 'o'
        112 -> _root_.scala.Some(lexerState16), // 'p'
        113 -> _root_.scala.Some(lexerState16), // 'q'
        114 -> _root_.scala.Some(lexerState16), // 'r'
        115 -> _root_.scala.Some(lexerState16), // 's'
        116 -> _root_.scala.Some(lexerState16), // 't'
        117 -> _root_.scala.Some(lexerState16), // 'u'
        118 -> _root_.scala.Some(lexerState16), // 'v'
        119 -> _root_.scala.Some(lexerState16), // 'w'
        120 -> _root_.scala.Some(lexerState16), // 'x'
        121 -> _root_.scala.Some(lexerState16), // 'y'
        122 -> _root_.scala.Some(lexerState16), // 'z'
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Grammar.Terminal.mode(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState17: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 17,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.Some(lexerState8), // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        65 -> _root_.scala.Some(lexerState16), // 'A'
        66 -> _root_.scala.Some(lexerState16), // 'B'
        67 -> _root_.scala.Some(lexerState16), // 'C'
        68 -> _root_.scala.Some(lexerState16), // 'D'
        69 -> _root_.scala.Some(lexerState16), // 'E'
        70 -> _root_.scala.Some(lexerState16), // 'F'
        71 -> _root_.scala.Some(lexerState16), // 'G'
        72 -> _root_.scala.Some(lexerState16), // 'H'
        73 -> _root_.scala.Some(lexerState16), // 'I'
        74 -> _root_.scala.Some(lexerState16), // 'J'
        75 -> _root_.scala.Some(lexerState16), // 'K'
        76 -> _root_.scala.Some(lexerState16), // 'L'
        77 -> _root_.scala.Some(lexerState16), // 'M'
        78 -> _root_.scala.Some(lexerState16), // 'N'
        79 -> _root_.scala.Some(lexerState16), // 'O'
        80 -> _root_.scala.Some(lexerState16), // 'P'
        81 -> _root_.scala.Some(lexerState16), // 'Q'
        82 -> _root_.scala.Some(lexerState16), // 'R'
        83 -> _root_.scala.Some(lexerState16), // 'S'
        84 -> _root_.scala.Some(lexerState16), // 'T'
        85 -> _root_.scala.Some(lexerState16), // 'U'
        86 -> _root_.scala.Some(lexerState16), // 'V'
        87 -> _root_.scala.Some(lexerState16), // 'W'
        88 -> _root_.scala.Some(lexerState16), // 'X'
        89 -> _root_.scala.Some(lexerState16), // 'Y'
        90 -> _root_.scala.Some(lexerState16), // 'Z'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState18: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 18,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        32 -> _root_.scala.Some(lexerState18), // ' '
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState19: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 19,
      on = _root_.scala.collection.immutable.Map(
        34 -> _root_.scala.None, // '\"'
        92 -> _root_.scala.None, // '\\'
      ),
      elseOn = _root_.scala.Some(lexerState19),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.slyce.generate.parsers.Grammar.Terminal.chars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState20: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 20,
      on = _root_.scala.collection.immutable.Map(
        34 -> _root_.scala.Some(lexerState10), // '\"'
        92 -> _root_.scala.Some(lexerState7), // '\\'
      ),
      elseOn = _root_.scala.Some(lexerState19),
      yields = None,
    )
  
  private lazy val lexerState21: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 21,
      on = _root_.scala.collection.immutable.Map(
        116 -> _root_.scala.Some(lexerState2), // 't'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState22: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 22,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.slyce.generate.parsers.Grammar.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState23: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 23,
      on = _root_.scala.collection.immutable.Map(
        97 -> _root_.scala.Some(lexerState12), // 'a'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState24: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 24,
      on = _root_.scala.collection.immutable.Map(
      ),
      elseOn = _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (1, 1),
              build = span => text => _root_.slyce.generate.parsers.Grammar.Terminal.escChar(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState25: _root_.slyce.parse.Lexer.State[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.slyce.generate.parsers.Grammar.Terminal](
      id = 25,
      on = _root_.scala.collection.immutable.Map(
        47 -> _root_.scala.Some(lexerState1), // '/'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  val lexer: _root_.slyce.parse.Lexer[_root_.slyce.generate.parsers.Grammar.Terminal] =
    _root_.slyce.parse.Lexer[_root_.slyce.generate.parsers.Grammar.Terminal](lexerState0)
  
  // =====| Grammar |=====
  
  lazy val grammarState0: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 0,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`@start:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState322)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar => grammarState332
      },
    )
  
  lazy val grammarState1: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 1,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState239)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState252)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState309)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState280)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState274)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState232)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState62
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState1
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState43
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState320
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState12
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState267
      },
    )
  
  lazy val grammarState2: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 2,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState105)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState187)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState262
      },
    )
  
  lazy val grammarState3: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 3,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState328)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState254)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState218)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState264
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState98
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState10
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState140
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState209
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState90
      },
    )
  
  lazy val grammarState4: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 4,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState5: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 5,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState337)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`~`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState168)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState78)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState286)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState130)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.BasicNT => grammarState281
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocNT => grammarState127
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.StandardNT => grammarState184
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListNT => grammarState116
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState330
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftNT => grammarState227
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody => grammarState282
      },
    )
  
  lazy val grammarState6: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 6,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState40)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState7: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 7,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState8: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 8,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState299)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState9: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 9,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState257)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState294)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState212)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState327
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState100
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState74
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState157
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState326
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState288
      },
    )
  
  lazy val grammarState10: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 10,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState110)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState256)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState11: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 11,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState255)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState242)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState342
      },
    )
  
  lazy val grammarState12: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 12,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState79)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?` => grammarState59
      },
    )
  
  lazy val grammarState13: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 13,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState277)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?` => grammarState159
      },
    )
  
  lazy val grammarState14: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 14,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState292)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState15: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 15,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState16: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 16,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState5)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Tail => grammarState54
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NT => grammarState107
      },
    )
  
  lazy val grammarState17: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 17,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState257)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState294)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState212)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState327
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState100
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState70
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState157
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState326
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState288
      },
    )
  
  lazy val grammarState18: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 18,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState19: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 19,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState48)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState20: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 20,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState261)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState2)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState21: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 21,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState148)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState231)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head => grammarState6
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char => grammarState266
      },
    )
  
  lazy val grammarState22: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 22,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState257)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState294)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState212)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState327
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState100
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState237
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState157
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState326
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState288
      },
    )
  
  lazy val grammarState23: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 23,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState24: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 24,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState25: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 25,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState252)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState232)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState276
      },
    )
  
  lazy val grammarState26: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 26,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState275)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState315)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState27: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 27,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState28: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 28,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState337)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState286)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.BasicNT => grammarState281
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.StandardNT => grammarState33
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftNT => grammarState227
      },
    )
  
  lazy val grammarState29: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 29,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState160)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState30: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 30,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState161)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState31: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 31,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState301)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState270)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState181
      },
    )
  
  lazy val grammarState32: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 32,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState257)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState294)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState212)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState327
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState100
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState30
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState157
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState326
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState288
      },
    )
  
  lazy val grammarState33: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 33,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.StandardNT), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`~`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocNT(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState34: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 34,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState35: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 35,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState328)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState254)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState218)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState264
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState98
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState334
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState140
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState209
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState90
      },
    )
  
  lazy val grammarState36: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 36,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState37: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 37,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState38: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 38,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListNT._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState341)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState39: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 39,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState40: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 40,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState41: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 41,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState42: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 42,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState144)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState4)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState243
      },
    )
  
  lazy val grammarState43: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 43,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState44: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 44,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`^`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftNT(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState45: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 45,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState174)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?` => grammarState85
      },
    )
  
  lazy val grammarState46: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 46,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState17)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState42)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState47: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 47,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState48: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 48,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState49: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 49,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState50: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 50,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState200)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState255)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState191)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState217)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState133)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState242)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState233
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState125
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState250
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState86
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState171
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState73
      },
    )
  
  lazy val grammarState51: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 51,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState317)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState52: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 52,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState148)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState231)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head => grammarState297
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char => grammarState266
      },
    )
  
  lazy val grammarState53: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 53,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`<`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState247)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState109)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocPair => grammarState230
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType => grammarState111
      },
    )
  
  lazy val grammarState54: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 54,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Grammar.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NT), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Tail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState55: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 55,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState56: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 56,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState57: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 57,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState58: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 58,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState59: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 59,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState60: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 60,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState61: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 61,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState83)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Tail => grammarState66
      },
    )
  
  lazy val grammarState62: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 62,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState63: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 63,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState64: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 64,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState324)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState162)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState47
      },
    )
  
  lazy val grammarState65: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 65,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState66: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 66,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`|`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Tail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState67: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 67,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState123)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState206)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState136)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState186)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState93
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState234
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState198
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState339
      },
    )
  
  lazy val grammarState68: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 68,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState69: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 69,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocPair(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocPair(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState236)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocPair(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState316)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState196
      },
    )
  
  lazy val grammarState70: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 70,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState122)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState71: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 71,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState121)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?` => grammarState97
      },
    )
  
  lazy val grammarState72: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 72,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState73: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 73,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState74: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 74,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState179)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState75: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 75,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState153)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?` => grammarState15
      },
    )
  
  lazy val grammarState76: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 76,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState77: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 77,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState78: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 78,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState79: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 79,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState80: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 80,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState81: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 81,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState148)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState231)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head => grammarState51
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char => grammarState266
      },
    )
  
  lazy val grammarState82: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 82,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState271)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?` => grammarState23
      },
    )
  
  lazy val grammarState83: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 83,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState239)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState274)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState309)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState280)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState62
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState1
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState61
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState12
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState267
      },
    )
  
  lazy val grammarState84: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 84,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState148)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState231)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head => grammarState176
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char => grammarState266
      },
    )
  
  lazy val grammarState85: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 85,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState86: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 86,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Grammar.Terminal.`^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Grammar.Terminal.`^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState87: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 87,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState252)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState232)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState244
      },
    )
  
  lazy val grammarState88: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 88,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState89: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 89,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState90: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 90,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState91: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 91,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState257)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState294)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState212)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState327
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState100
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState199
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState157
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState326
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState288
      },
    )
  
  lazy val grammarState92: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 92,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListNT._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState93: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 93,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState94: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 94,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState81)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState301)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState56)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState333)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState216)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState270)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState201
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState94
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState223
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState77
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState82
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState303
      },
    )
  
  lazy val grammarState95: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 95,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState96: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 96,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState97: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 97,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState98: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 98,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState310)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState324)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState308)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState182)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState295)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState162)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState306
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState152
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState246
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState129
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState45
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState68
      },
    )
  
  lazy val grammarState99: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 99,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState126)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState100: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 100,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState310)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState104)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState308)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState182)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState295)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState18)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState306
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState152
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState154
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState129
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState45
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState68
      },
    )
  
  lazy val grammarState101: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 101,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState102: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 102,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState328)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState254)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState218)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState264
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState98
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState20
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState140
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState209
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState90
      },
    )
  
  lazy val grammarState103: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 103,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocPair), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`|`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocPair), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`|`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState104: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 104,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState105: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 105,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState106: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 106,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState310)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState137)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState308)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState182)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState295)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState258)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState306
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState152
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState263
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState129
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState45
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState68
      },
    )
  
  lazy val grammarState107: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 107,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState16)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState108: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 108,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState109: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 109,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`>`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState110: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 110,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState257)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState294)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState212)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState327
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState100
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState313
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState157
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState326
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState288
      },
    )
  
  lazy val grammarState111: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 111,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState290)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState36)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState253)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState35)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState37
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState69
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState202
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState249
      },
    )
  
  lazy val grammarState112: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 112,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState113: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 113,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState114: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 114,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState115: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 115,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState190)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState65)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState323)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState102)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState228
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState278
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState319
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState318
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState71
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState197
      },
    )
  
  lazy val grammarState116: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 116,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListNT), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState117: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 117,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Grammar.Terminal.`^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState118: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 118,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState119: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 119,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState120: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 120,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`|`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Tail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState121: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 121,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState122: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 122,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState144)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState4)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState143
      },
    )
  
  lazy val grammarState123: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 123,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState148)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState231)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head => grammarState19
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char => grammarState266
      },
    )
  
  lazy val grammarState124: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 124,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Grammar.Terminal.mode), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`@start:`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState125: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 125,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState200)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState255)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState191)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState217)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState133)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState242)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState233
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState125
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState250
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState76
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState171
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState73
      },
    )
  
  lazy val grammarState126: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 126,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState104)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState18)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState172
      },
    )
  
  lazy val grammarState127: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 127,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocNT), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState128: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 128,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Tail._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState129: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 129,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState130: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 130,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState131: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 131,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState132: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 132,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Grammar.Terminal.`^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Grammar.Terminal.`^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState133: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 133,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState134: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 134,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState135: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 135,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState32)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState151)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState136: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 136,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState137: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 137,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState138: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 138,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState139: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 139,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState140: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 140,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState163)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState141: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 141,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState158)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState64)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState142: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 142,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState236)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState316)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState235
      },
    )
  
  lazy val grammarState143: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 143,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState144: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 144,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState145: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 145,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState146: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 146,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState177)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState147: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 147,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState148: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 148,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Char._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Char._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Char._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState149: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 149,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState150: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 150,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Grammar.Terminal.`^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState151: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 151,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState273)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState34)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState63
      },
    )
  
  lazy val grammarState152: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 152,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState310)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState221)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState308)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState182)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState295)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState114)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState306
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState152
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState80
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState129
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState45
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState68
      },
    )
  
  lazy val grammarState153: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 153,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState154: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 154,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState155: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 155,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState156: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 156,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState157: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 157,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState67)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState158: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 158,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState257)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState294)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState212)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState327
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState100
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState29
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState157
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState326
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState288
      },
    )
  
  lazy val grammarState159: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 159,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState160: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 160,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState324)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState162)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState300
      },
    )
  
  lazy val grammarState161: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 161,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState273)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState34)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState203
      },
    )
  
  lazy val grammarState162: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 162,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState163: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 163,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState307)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState60)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState119)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState169)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState170
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState193
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState13
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState343
      },
    )
  
  lazy val grammarState164: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 164,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState96)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState165: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 165,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Grammar.Terminal.`^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Grammar.Terminal.`^`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState166: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 166,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState167: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 167,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState328)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState254)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState218)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState264
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState98
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState141
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState140
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState209
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState90
      },
    )
  
  lazy val grammarState168: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 168,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`<`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState247)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`>`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState109)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Head => grammarState28
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType => grammarState111
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocPair => grammarState238
      },
    )
  
  lazy val grammarState169: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 169,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState328)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState254)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState218)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState264
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState98
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState135
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState140
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState209
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState90
      },
    )
  
  lazy val grammarState170: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 170,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState171: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 171,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState189)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?` => grammarState58
      },
    )
  
  lazy val grammarState172: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 172,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState173: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 173,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState105)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState187)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState208
      },
    )
  
  lazy val grammarState174: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 174,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState175: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 175,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState81)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState301)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState56)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState333)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState216)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState270)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState201
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState94
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState223
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState150
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState82
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState303
      },
    )
  
  lazy val grammarState176: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 176,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState113)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState177: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 177,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState178: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 178,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState179: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 179,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState236)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState316)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState155
      },
    )
  
  lazy val grammarState180: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 180,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState328)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState254)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState218)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState264
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState98
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState26
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState140
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState209
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState90
      },
    )
  
  lazy val grammarState181: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 181,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState182: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 182,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState328)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState254)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState218)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState264
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState98
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState245
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState140
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState209
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState90
      },
    )
  
  lazy val grammarState183: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 183,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`:`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.BasicNT(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState184: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 184,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.StandardNT), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState185: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 185,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState173)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState186: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 186,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState328)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState254)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState218)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState264
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState98
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState46
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState140
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState209
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState90
      },
    )
  
  lazy val grammarState187: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 187,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState188: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 188,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState156)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState189: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 189,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState190: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 190,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState148)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState231)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head => grammarState211
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char => grammarState266
      },
    )
  
  lazy val grammarState191: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 191,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState192: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 192,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState221)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState114)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState229
      },
    )
  
  lazy val grammarState193: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 193,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState307)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState273)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState119)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState169)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState60)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState34)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState170
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState298
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState222
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState165
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState13
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState343
      },
    )
  
  lazy val grammarState194: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 194,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState239)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState252)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState309)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState280)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState274)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState232)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState62
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState1
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState43
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState132
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState12
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState267
      },
    )
  
  lazy val grammarState195: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 195,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState39)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState196: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 196,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState197: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 197,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState198: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 198,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState57)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?` => grammarState55
      },
    )
  
  lazy val grammarState199: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 199,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState11)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState200: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 200,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState148)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState231)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head => grammarState268
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char => grammarState266
      },
    )
  
  lazy val grammarState201: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 201,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState202: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 202,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState134)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?` => grammarState214
      },
    )
  
  lazy val grammarState203: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 203,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState204: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 204,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState205: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 205,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState137)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState258)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState240
      },
    )
  
  lazy val grammarState206: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 206,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState207: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 207,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState257)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState294)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState212)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState327
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState100
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState338
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState157
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState326
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState288
      },
    )
  
  lazy val grammarState208: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 208,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState209: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 209,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState204)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?` => grammarState95
      },
    )
  
  lazy val grammarState210: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 210,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState211: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 211,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState89)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState212: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 212,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState328)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState254)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState218)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState264
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState98
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState304
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState140
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState209
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState90
      },
    )
  
  lazy val grammarState213: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 213,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState287)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState214: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 214,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Element(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState215: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 215,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState115)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Tail => grammarState210
      },
    )
  
  lazy val grammarState216: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 216,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState217: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 217,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState328)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState254)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState218)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState264
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState98
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState336
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState140
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState209
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState90
      },
    )
  
  lazy val grammarState218: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 218,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState219: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 219,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.slyce.generate.parsers.Grammar.Terminal.`;`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.NT), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Head(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState220: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 220,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState221: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 221,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState222: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 222,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState223: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 223,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState224: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 224,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState83)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Tail => grammarState302
      },
    )
  
  lazy val grammarState225: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 225,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState101)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState226: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 226,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState257)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState294)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState212)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState327
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState100
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState99
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState157
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState326
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState288
      },
    )
  
  lazy val grammarState227: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 227,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftNT), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.StandardNT._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState228: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 228,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState229: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 229,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState230: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 230,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState53)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail => grammarState103
      },
    )
  
  lazy val grammarState231: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 231,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Char._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Char._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Char._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState232: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 232,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState233: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 233,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState234: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 234,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState123)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState144)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState136)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState186)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState206)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState4)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState93
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState279
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState149
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState117
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState198
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState339
      },
    )
  
  lazy val grammarState235: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 235,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState236: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 236,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState237: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 237,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState25)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState238: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 238,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState53)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail => grammarState291
      },
    )
  
  lazy val grammarState239: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 239,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState148)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState231)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head => grammarState188
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char => grammarState266
      },
    )
  
  lazy val grammarState240: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 240,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState241: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 241,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState310)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState7)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState308)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState182)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState295)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState178)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState306
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState152
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState325
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState129
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState45
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState68
      },
    )
  
  lazy val grammarState242: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 242,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState243: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 243,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState244: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 244,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState245: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 245,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState207)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState192)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState246: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 246,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState247: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 247,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`<`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`<`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`<`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`<`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState248: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 248,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState147)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?` => grammarState49
      },
    )
  
  lazy val grammarState249: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 249,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState250: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 250,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState251: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 251,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState22)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState87)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState252: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 252,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState253: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 253,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState254: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 254,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState255: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 255,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState256: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 256,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState137)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState258)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState344
      },
    )
  
  lazy val grammarState257: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 257,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState258: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 258,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState259: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 259,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState305)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState260: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 260,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState104)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState18)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState283
      },
    )
  
  lazy val grammarState261: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 261,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState257)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState294)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState212)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState327
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState100
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState185
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState157
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState326
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState288
      },
    )
  
  lazy val grammarState262: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 262,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState263: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 263,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState264: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 264,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState265: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 265,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState239)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState274)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState309)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState280)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState62
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState194
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState12
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState267
      },
    )
  
  lazy val grammarState266: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 266,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState148)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState231)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Tail => grammarState329
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char => grammarState314
      },
    )
  
  lazy val grammarState267: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 267,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState268: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 268,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState145)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState269: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 269,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState270: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 270,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState271: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 271,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState272: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 272,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState221)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState114)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState88
      },
    )
  
  lazy val grammarState273: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 273,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState274: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 274,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState275: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 275,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState257)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState294)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState212)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState327
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState100
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState8
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState157
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState326
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState288
      },
    )
  
  lazy val grammarState276: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 276,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState277: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 277,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState278: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 278,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState310)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState105)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState308)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState182)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState295)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState187)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState306
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState152
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState335
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState129
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState45
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState68
      },
    )
  
  lazy val grammarState279: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 279,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState123)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState144)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState136)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState186)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState206)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState4)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState93
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState279
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState149
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState166
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState198
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState339
      },
    )
  
  lazy val grammarState280: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 280,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState328)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState254)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState218)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState264
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState98
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState251
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState140
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState209
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState90
      },
    )
  
  lazy val grammarState281: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 281,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.BasicNT), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.StandardNT._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState282: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 282,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.NTBody), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NT(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState283: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 283,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState284: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 284,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState285: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 285,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState21)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState257)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState294)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState212)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState327
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState100
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState259
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState157
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState326
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState288
      },
    )
  
  lazy val grammarState286: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 286,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState239)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState274)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState309)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState280)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState62
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState1
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Head => grammarState183
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState224
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState12
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState267
      },
    )
  
  lazy val grammarState287: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 287,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState200)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState133)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState191)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState217)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState233
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState50
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState171
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState73
      },
    )
  
  lazy val grammarState288: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 288,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState289: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 289,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState290: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 290,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState148)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState231)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head => grammarState146
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char => grammarState266
      },
    )
  
  lazy val grammarState291: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 291,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocPair), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Head(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AssocPair), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList3Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState292: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 292,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState81)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState216)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState56)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState333)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState201
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState175
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState82
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState303
      },
    )
  
  lazy val grammarState293: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 293,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState294: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 294,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState295: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 295,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState296: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 296,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState297: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 297,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState138)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState298: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 298,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState307)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState273)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState119)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState169)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState60)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState34)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState170
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState298
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState222
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState27
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState13
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState343
      },
    )
  
  lazy val grammarState299: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 299,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState7)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState178)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState293
      },
    )
  
  lazy val grammarState300: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 300,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState301: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 301,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState302: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 302,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList1Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState303: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 303,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState304: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 304,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState226)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState260)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState305: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 305,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState301)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState270)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState108
      },
    )
  
  lazy val grammarState306: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 306,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState307: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 307,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState148)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState231)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head => grammarState164
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char => grammarState266
      },
    )
  
  lazy val grammarState308: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 308,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState309: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 309,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState310: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 310,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState148)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState231)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head => grammarState225
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char => grammarState266
      },
    )
  
  lazy val grammarState311: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 311,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState5)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Tail => grammarState219
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NT => grammarState107
      },
    )
  
  lazy val grammarState312: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 312,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState311)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState313: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 313,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState205)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState314: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 314,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState148)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState231)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Tail => grammarState128
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char => grammarState314
      },
    )
  
  lazy val grammarState315: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 315,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState7)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState178)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState112
      },
    )
  
  lazy val grammarState316: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 316,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`*`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState317: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 317,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState318: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 318,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState265)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState319: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 319,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Tail._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState115)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Tail => grammarState120
      },
    )
  
  lazy val grammarState320: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 320,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState321: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 321,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState255)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState242)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType => grammarState220
      },
    )
  
  lazy val grammarState322: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 322,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.mode) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState331)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState323: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 323,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.terminal), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState324: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 324,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`+`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState325: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 325,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState326: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 326,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState289)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?`._2, stack)
          }
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.`Optional_?` => grammarState131
      },
    )
  
  lazy val grammarState327: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 327,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState328: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 328,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState148)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState231)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head => grammarState195
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char => grammarState266
      },
    )
  
  lazy val grammarState329: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 329,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Char), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList4Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState330: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 330,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState52)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState296)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState269)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState3)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState118
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState106
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState38
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState213
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState75
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState284
      },
    )
  
  lazy val grammarState331: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 331,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState5)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList0Head => grammarState124
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NT => grammarState312
      },
    )
  
  lazy val grammarState332: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 332,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Accept[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(root: _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar), _) :: _root_.scala.Nil => root
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState333: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 333,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState328)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState254)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState218)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState167)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState264
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState98
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState340
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState140
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState209
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState90
      },
    )
  
  lazy val grammarState334: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 334,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState9)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState142)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState335: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 335,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState336: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 336,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState91)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState321)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState337: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 337,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState190)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState65)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState323)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState102)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState228
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState278
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList2Head => grammarState44
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState215
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState318
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState71
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState197
      },
    )
  
  lazy val grammarState338: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 338,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState272)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState339: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 339,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState340: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 340,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState285)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState31)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState341: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 341,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList._2, stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState84)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState24)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState72)
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState180)
      },
      onNT = {
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Raw => grammarState139
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.Element => grammarState241
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList => grammarState92
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.ElementList => grammarState14
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement => grammarState248
        case _: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList => grammarState41
      },
    )
  
  lazy val grammarState342: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 342,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._3(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState343: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 343,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`)`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.NonOptElement._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState344: _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar.State[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](
      id = 344,
      onTerm = {
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`^`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`;`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`+`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.terminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`(`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`\\?`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.nonTerminal) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.slyce.generate.parsers.Grammar.Terminal.`*`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.slyce.generate.parsers.Grammar.NonTerminal.ListType), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.slyce.generate.parsers.Grammar.Terminal.`)`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.slyce.generate.parsers.Grammar.NonTerminal.LiftElementList), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.slyce.generate.parsers.Grammar.Terminal.`(`), toState) ::
                stack,
            ) =>
              (toState, _root_.slyce.generate.parsers.Grammar.NonTerminal.AnonList._2(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  val grammar: _root_.slyce.parse.Grammar[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar] =
    _root_.slyce.parse.Grammar[_root_.slyce.generate.parsers.Grammar.Terminal, _root_.slyce.generate.parsers.Grammar.NonTerminal, _root_.slyce.generate.parsers.Grammar.NonTerminal.Grammar](grammarState0)
  
}

// format: on
