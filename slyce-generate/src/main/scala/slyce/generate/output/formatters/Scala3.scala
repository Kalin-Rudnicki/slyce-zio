package slyce.generate.output.formatters

import cats.data.NonEmptyList
import cats.syntax.either.*
import cats.syntax.list.*
import klib.utils.*

import slyce.generate.grammar.*
import slyce.generate.lexer.*
import slyce.generate.output.*

object Scala3 extends Formatter {

  // TODO (KR) :
  override def format(pkg: List[String], result: Result): String = {
    val identifierName: Map[ExpandedGrammar.Identifier, String] = Map.empty // TODO (KR) :

    IndentedString
      .inline(
        header,
        packageName(pkg),
        imports,
        // TODO (KR) :
        "// TODO (KR) : ...",
        IndentedString.Break,
      )
      .toString("  ")
  }

  // =====| Types |=====

  private final case class NT(
      name: ExpandedGrammar.Identifier,
      prods: NT.Productions,
      definedTypes: List[NT.TypeDefinition],
      definedFunctions: List[IndentedString],
  )
  private object NT {

    final case class Production(idx: Int, elements: List[ExpandedGrammar.Identifier])

    enum Productions {
      case Single(elements: List[ExpandedGrammar.Identifier])
      case Many(productions: NonEmptyList[Production])
    }
    object Productions {

      def apply(productions: NonEmptyList[Production]): Productions =
        productions match {
          case NonEmptyList(head, Nil) => Single(head.elements)
          case _                       => Many(productions)
        }

      def apply[A](nel: NonEmptyList[A])(convert: A => List[ExpandedGrammar.Identifier]): Productions =
        Productions(nel.zipWithIndex.map { (a, idx) => Production(idx + 1, convert(a)) })

    }

    enum TypeDefinition {
      case Trait(name: Extras.With.Type)
      case Type(name: Extras.With.Type, equals: ExpandedGrammar.Identifier)
    }

  }

  // =====| Helpers |=====

  // TODO (KR) : Version and/or date?
  private def header: IndentedString =
    IndentedString.inline(
      "// !!! DO NOT MODIFY !!!",
      "// File was automatically generated by slyce",
      IndentedString.Break,
    )

  private def packageName(pkg: List[String]): IndentedString =
    if (pkg.nonEmpty) IndentedString.inline(pkg.mkString("package ", ".", ""), IndentedString.Break)
    else IndentedString.inline()

  // TODO (KR) : Be smart and make sure imports are only included if necessary
  private def imports: IndentedString =
    IndentedString.inline(
      "import cats.data.NonEmptyList",
      "import slyce.core.*",
      "import slyce.parse.*",
      IndentedString.Break,
    )

}
