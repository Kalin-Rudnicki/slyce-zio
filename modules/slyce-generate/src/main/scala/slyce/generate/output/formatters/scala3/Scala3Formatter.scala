package slyce.generate.output.formatters.scala3

import harness.core.{given, *}

import slyce.generate.grammar.ExpandedGrammar
import slyce.generate.output.Result
import slyce.generate.output.formatters.Formatter
import slyce.generate.output.formatters.scala3.GenUtils.*

object Scala3Formatter extends Formatter {

  override def format(pkg: List[String], name: String, result: Result): String = {
    val utils = GenUtils(pkg, name, result)

    IndentedString
      .inline(
        header,
        IndentedString.Break,
        packageName(pkg),
        "// format: off",
        IndentedString.Break,
        s"object $name extends $ParsePath.Parser {",
        IndentedString.indented(
          IndentedString.Break,
          s"override type NTRoot = ${utils.qualifiedIdentifierName(ExpandedGrammar.Identifier.NonTerminal.NamedNt(result.grammar.startNT.value))}",
          IndentedString.Break,
          "// =====| Terminals |=====",
          IndentedString.Break,
          GenTerminals.idtStr(utils, result.extras.allTerminals),
          IndentedString.Break,
          "// =====| Non-Terminals |=====",
          IndentedString.Break,
          GenNonTerminals.idtStr(utils, result.extras.allNTs),
          IndentedString.Break,
          "// =====| Lexer |=====",
          IndentedString.Break,
          GenLexer.idtStr(utils, result.dfa),
          IndentedString.Break,
          "// =====| Grammar |=====",
          IndentedString.Break,
          GenGrammar.idtStr(utils, result.expandedGrammar, result.parsingTable),
          IndentedString.Break,
        ),
        "}",
        IndentedString.Break,
        "// format: on",
        IndentedString.Break,
      )
      .toString("  ")
  }

  // TODO (KR) : Version and/or date?
  private def header: IndentedString =
    IndentedString.inline(
      "// !!! DO NOT MODIFY !!!",
      "// File was automatically generated by slyce",
    )

  private def packageName(pkg: List[String]): IndentedString =
    if (pkg.nonEmpty) IndentedString.inline(pkg.mkString("package ", ".", ""), IndentedString.Break)
    else IndentedString.inline()

}
